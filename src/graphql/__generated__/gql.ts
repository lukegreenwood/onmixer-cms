/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  mutation ApplyAssignedDefaultSchedule(\n    $networkId: ID!\n    $date: DateTime!\n    $assignedTo: [DayOfWeek!]!\n  ) {\n    applyAssignedDefaultSchedule(\n      input: { networkId: $networkId, date: $date, assignedTo: $assignedTo }\n    ) {\n      success\n      message\n    }\n  }\n": typeof types.ApplyAssignedDefaultScheduleDocument,
    "\n  mutation ApplyDefaultSchedule($defaultScheduleId: ID!, $date: DateTime!) {\n    applyDefaultSchedule(\n      input: { defaultSchedule: $defaultScheduleId, date: $date }\n    ) {\n      success\n      message\n    }\n  }\n": typeof types.ApplyDefaultScheduleDocument,
    "\n  mutation AssignDefaultScheduleToNetwork($input: AssignDefaultScheduleToNetworkInput!) {\n    assignDefaultScheduleToNetwork(input: $input) {\n      success\n      message\n    }\n  }\n": typeof types.AssignDefaultScheduleToNetworkDocument,
    "\n  mutation AssignMusicClock($input: AssignMusicClockInput!) {\n    assignMusicClock(input: $input) {\n      assignment {\n        id\n        clock {\n          id\n          name\n          targetRuntime\n        }\n        dayOfWeek\n        hour\n        priority\n        isTemplate\n        network {\n          id\n          name\n        }\n      }\n    }\n  }\n": typeof types.AssignMusicClockDocument,
    "\n  mutation StartMusicSchedulingJob($input: StartMusicSchedulingJobInput!) {\n    startMusicSchedulingJob(input: $input) {\n      job {\n        id\n        status\n        type\n        progress\n        createdAt\n      }\n    }\n  }\n": typeof types.StartMusicSchedulingJobDocument,
    "\n  mutation BulkDeleteDefaultScheduleItems($input: BulkDeleteDefaultScheduleItemsInput!) {\n    bulkDeleteDefaultScheduleItems(input: $input) {\n      success\n      successCount\n      failureCount\n      totalItems\n      deletedIds\n      failedItems {\n        id\n        error\n      }\n    }\n  }\n": typeof types.BulkDeleteDefaultScheduleItemsDocument,
    "\n  mutation BulkUpsertDefaultScheduleItems($input: BulkUpsertDefaultScheduleItemsInput!) {\n    bulkUpsertDefaultScheduleItems(input: $input) {\n      success\n      successCount\n      failureCount\n      totalItems\n      upsertedItems {\n        id\n        start\n        end\n        endsNextDay\n        episodeName\n        episodeDesc\n        show {\n          id\n          shortName\n        }\n        series {\n          id\n          shortName\n        }\n        presenters {\n          id\n          name\n        }\n        networks {\n          id\n          name\n        }\n        existingEpisode {\n          id\n          name\n        }\n        repeatOf {\n          id\n        }\n      }\n      failedItems {\n        id\n        error\n      }\n    }\n  }\n": typeof types.BulkUpsertDefaultScheduleItemsDocument,
    "\n  mutation CreateEpisode($input: CreateEpisodeInput!) {\n    createEpisode(input: $input) {\n      episode {\n        id\n        name\n        description\n        duration {\n          formatted\n          raw\n        }\n        extraData\n        shortId\n        createdAt\n        updatedAt\n        url\n        featuredImage {\n          id\n          key\n          urls {\n            medium\n            square\n          }\n        }\n        show {\n          id\n          shortName\n          fullName\n        }\n        series {\n          id\n          fullName\n        }\n        presenters {\n          id\n          name\n        }\n        networks {\n          id\n          name\n          logoSvgIcon\n        }\n      }\n    }\n  }\n": typeof types.CreateEpisodeDocument,
    "\n  mutation CreateGenre($input: CreateGenreInput!) {\n    createGenre(input: $input) {\n      success\n      message\n      genre {\n        id\n        name\n      }\n    }\n  }\n": typeof types.CreateGenreDocument,
    "\n  mutation CreateMusicClock($input: CreateMusicClockInput!) {\n    createMusicClock(input: $input) {\n      success\n      message\n      clock {\n        id\n        name\n        description\n        color\n        targetRuntime\n        network {\n          id\n          name\n        }\n        items {\n          ... on TrackClockItem {\n            ...CommonClockItemFields\n            track {\n              id\n              title\n            }\n          }\n          ... on SubcategoryClockItem {\n            ...CommonClockItemFields\n            subcategory {\n              id\n              name\n              category {\n                id\n                name\n              }\n            }\n          }\n          ... on GenreClockItem {\n            ...CommonClockItemFields\n            genre {\n              id\n              name\n            }\n          }\n          ... on NoteClockItem {\n            ...CommonClockItemFields\n            label\n            content\n          }\n          ... on AdBreakClockItem {\n            ...CommonClockItemFields\n            scheduledStartTime\n          }\n          ... on CommandClockItem {\n            ...CommonClockItemFields\n            command\n          }\n        }\n      }\n    }\n  }\n\n  fragment CommonClockItemFields on ClockItemInterface {\n    id\n    clockId\n    createdAt\n    duration\n    orderIndex\n    updatedAt\n  }\n": typeof types.CreateMusicClockDocument,
    "\n  mutation CreateMusicRule($input: CreateMusicRuleInput!) {\n    createMusicRule(input: $input) {\n      success\n      message\n      rule {\n        id\n        name\n        description\n        ruleType\n        breakable\n        value\n        unit\n        criteria {\n          categories\n          genres\n          artists\n          tags\n          timeWindows {\n            startHour\n            endHour\n            daysOfWeek\n          }\n        }\n        priority\n        isActive\n        network {\n          id\n          name\n        }\n      }\n    }\n  }\n": typeof types.CreateMusicRuleDocument,
    "\n  mutation CreateNetwork($input: CreateNetworkInput!) {\n    createNetwork(input: $input) {\n      success\n      message\n      network {\n        id\n        name\n        code\n        baseUrl\n        imagesUrl\n        logoSvg\n        logoSvgCircular\n        logoSvgColor\n        logoSvgIcon\n        networkType\n        tagline\n        cssUrl\n        playFormat\n        playUrl\n        shortId\n      }\n    }\n  }\n": typeof types.CreateNetworkDocument,
    "\n  mutation CreatePresenter($input: CreatePresenterInput!) {\n    createPresenter(input: $input) {\n      presenter {\n        id\n        name\n        bio\n        shortBio\n        hidden\n        hero\n        picture\n        networks {\n          id\n          name\n          logoSvgIcon\n        }\n      }\n    }\n  }\n": typeof types.CreatePresenterDocument,
    "\n  mutation CreateScheduleItem($input: CreateScheduleItemInput!) {\n    createScheduleItem(input: $input) {\n      scheduleItem {\n        id\n        end\n        start\n        networks {\n          id\n          name\n        }\n        episode {\n          id\n          name\n          show {\n            shortName\n          }\n          description\n          broadcasts {\n            id\n            start\n            end\n          }\n          featuredImage {\n            urls {\n              square\n              customSquare(size: 150)\n            }\n          }\n          networks {\n            id\n            logoSvgIcon\n          }\n        }\n      }\n    }\n  }\n": typeof types.CreateScheduleItemDocument,
    "\n  mutation CreateScheduleTemplate($input: CreateDefaultScheduleInput!) {\n    createDefaultSchedule(input: $input) {\n      defaultSchedule {\n        id\n        name\n        assignedTo\n        networks {\n          id\n          name\n          code\n        }\n      }\n    }\n  }\n": typeof types.CreateScheduleTemplateDocument,
    "\n  mutation CreateSeries($input: CreateSeriesInput!) {\n    createSeries(input: $input) {\n      series {\n        id\n        fullName\n        shortName\n        fullDesc\n        shortDesc\n        archived\n        featuredImage {\n          id\n          key\n          type\n          mimeType\n          fileSize {\n            label\n            raw\n          }\n          urls {\n            medium\n            square\n          }\n        }\n        show {\n          id\n          shortName\n          fullName\n        }\n        network {\n          id\n          name\n        }\n      }\n    }\n  }\n": typeof types.CreateSeriesDocument,
    "\n  mutation CreateShow($input: CreateShowInput!) {\n    createShow(input: $input) {\n      show {\n        id\n        fullName\n        shortName\n        fullDesc\n        shortDesc\n        hidden\n        extraData\n        featuredImage {\n          id\n          key\n          urls {\n            medium\n            square\n          }\n        }\n        networks {\n          id\n          name\n          logoSvgIcon\n        }\n        presenters {\n          id\n          name\n        }\n        series {\n          items {\n            id\n            fullName\n          }\n        }\n        totalEpisodes\n        createdAt\n        updatedAt\n        url\n      }\n    }\n  }\n": typeof types.CreateShowDocument,
    "\n  mutation DeleteWeeklyOverride($id: ID!) {\n    removeWeeklyOverride(id: $id) {\n      success\n      message\n    }\n  }\n": typeof types.DeleteWeeklyOverrideDocument,
    "\n  mutation DeleteEpisode($input: DeleteEpisodeInput!) {\n    deleteEpisode(input: $input) {\n      success\n      message\n    }\n  }\n": typeof types.DeleteEpisodeDocument,
    "\n  mutation DeleteMedia($input: DeleteMediaInput!) {\n    deleteMedia(input: $input) {\n      success\n      message\n    }\n  }\n": typeof types.DeleteMediaDocument,
    "\n  mutation DeletePresenter($input: DeletePresenterInput!) {\n    deletePresenter(input: $input) {\n      success\n      message\n    }\n  }\n": typeof types.DeletePresenterDocument,
    "\n  mutation DeleteScheduleItem($input: DeleteScheduleItemInput!) {\n    deleteScheduleItem(input: $input) {\n        success\n    }\n  }\n": typeof types.DeleteScheduleItemDocument,
    "\n  mutation DeleteScheduleTemplate($input: DeleteDefaultScheduleInput!) {\n    deleteDefaultSchedule(input: $input) {\n      success\n      message\n    }\n  }\n": typeof types.DeleteScheduleTemplateDocument,
    "\n  mutation DeleteSeries($input: DeleteSeriesInput!) {\n    deleteSeries(input: $input) {\n      success\n      message\n    }\n  }\n": typeof types.DeleteSeriesDocument,
    "\n  mutation DeleteShow($input: DeleteShowInput!) {\n    deleteShow(input: $input) {\n      success\n      message\n    }\n  }\n": typeof types.DeleteShowDocument,
    "\n  mutation DeleteTrack($input: DeleteTrackInput!) {\n    deleteTrack(input: $input) {\n      success\n      message\n    }\n  }\n": typeof types.DeleteTrackDocument,
    "\n  mutation CreateDownloadJob($input: DownloadJobInput!) {\n    createDownloadJob(input: $input) {\n      id\n      status\n      sourceUrl\n      searchQuery\n      createdAt\n    }\n  }\n": typeof types.CreateDownloadJobDocument,
    "\n  mutation CreateBulkDownloadJobs($input: BulkDownloadJobsInput!) {\n    createBulkDownloadJobs(input: $input) {\n      success\n      message\n      results {\n        id\n        url\n        jobId\n        success\n        error\n      }\n      totalJobs\n      successfulJobs\n      failedJobs\n    }\n  }\n": typeof types.CreateBulkDownloadJobsDocument,
    "\n  mutation CancelJob($id: ID!) {\n    cancelJob(id: $id)\n  }\n": typeof types.CancelJobDocument,
    "\n  mutation DuplicateScheduleTemplate($input: DuplicateDefaultScheduleInput!) {\n    duplicateDefaultSchedule(input: $input) {\n      defaultSchedule {\n        id\n        name\n        assignedTo\n        networks {\n          id\n          name\n          code\n        }\n      }\n    }\n  }\n": typeof types.DuplicateScheduleTemplateDocument,
    "\n  mutation CreateEnrichmentJob($input: EnrichmentJobInput!) {\n    createEnrichmentJob(input: $input) {\n      id\n      status\n      progress\n      createdAt\n    }\n  }\n": typeof types.CreateEnrichmentJobDocument,
    "\n  mutation EnrichPendingJob($input: EnrichPendingJobInput!) {\n    enrichPendingJob(input: $input) {\n      id\n      status\n      progress\n      updatedAt\n    }\n  }\n": typeof types.EnrichPendingJobDocument,
    "\n  mutation RetryJob($id: ID!) {\n    retryJob(id: $id) {\n      id\n      status\n      progress\n      updatedAt\n    }\n  }\n": typeof types.RetryJobDocument,
    "\n  mutation CreateMusicClockTemplate($input: CreateMusicClockTemplateInput!) {\n    createMusicClockTemplate(input: $input) {\n      success\n      message\n      template {\n        id\n        name\n        description\n        isDefault\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": typeof types.CreateMusicClockTemplateDocument,
    "\n  mutation UpdateMusicClockTemplate($input: UpdateMusicClockTemplateInput!) {\n    updateMusicClockTemplate(input: $input) {\n      success\n      message\n      template {\n        id\n        name\n        description\n        isDefault\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": typeof types.UpdateMusicClockTemplateDocument,
    "\n  mutation DeleteMusicClockTemplate($id: ID!) {\n    deleteMusicClockTemplate(id: $id) {\n      success\n      message\n    }\n  }\n": typeof types.DeleteMusicClockTemplateDocument,
    "\n  mutation SetDefaultMusicClockTemplate($networkId: ID!, $templateId: ID!) {\n    setDefaultMusicClockTemplate(networkId: $networkId, templateId: $templateId) {\n      success\n      message\n    }\n  }\n": typeof types.SetDefaultMusicClockTemplateDocument,
    "\n  mutation AssignClockToTemplate($input: AssignClockToTemplateInput!) {\n    assignClockToTemplate(input: $input) {\n      success\n      message\n      assignment {\n        id\n        dayOfWeek\n        hour\n        clock {\n          id\n          name\n        }\n      }\n    }\n  }\n": typeof types.AssignClockToTemplateDocument,
    "\n  mutation RemoveClockFromTemplate($id: ID!) {\n    removeClockFromTemplate(id: $id) {\n      success\n      message\n    }\n  }\n": typeof types.RemoveClockFromTemplateDocument,
    "\n  mutation CreateWeeklyOverride($input: CreateWeeklyOverrideInput!) {\n    createWeeklyOverride(input: $input) {\n      success\n      message\n      override {\n        id\n        weekCommencing\n        dayOfWeek\n        hour\n        reason\n        clock {\n          id\n          name\n        }\n      }\n    }\n  }\n": typeof types.CreateWeeklyOverrideDocument,
    "\n  mutation RemoveWeeklyOverride($id: ID!) {\n    removeWeeklyOverride(id: $id) {\n      success\n      message\n    }\n  }\n": typeof types.RemoveWeeklyOverrideDocument,
    "\n  mutation UpdateEpisode($input: UpdateEpisodeInput!) {\n    updateEpisode(input: $input) {\n      episode {\n        id\n        name\n        description\n        duration {\n            formatted\n            raw\n        }\n        extraData\n        shortId\n        createdAt\n        updatedAt\n        url\n        featuredImage {\n            id\n            key\n            type\n            mimeType\n            fileSize {\n                label\n                raw\n            }\n            urls {\n                medium\n                square\n            }\n        }\n        show {\n            id\n            shortName\n        }\n        series {\n            id\n            shortName\n        }\n        presenters {\n            id\n            name\n        }\n        networks {\n            id\n            name\n            logoSvgIcon\n        }\n      }\n    }\n  }\n": typeof types.UpdateEpisodeDocument,
    "\n  mutation UpdateMusicClock($input: UpdateMusicClockInput!) {\n    updateMusicClock(input: $input) {\n      success\n      message\n      clock {\n        id\n        name\n        description\n        color\n        targetRuntime\n        network {\n          id\n          name\n        }\n        items {\n          ... on TrackClockItem {\n            ...CommonClockItemFields\n            track {\n              id\n              title\n            }\n          }\n          ... on SubcategoryClockItem {\n            ...CommonClockItemFields\n            subcategory {\n              id\n              name\n              category {\n                id\n                name\n              }\n            }\n          }\n          ... on GenreClockItem {\n            ...CommonClockItemFields\n            genre {\n              id\n              name\n            }\n          }\n          ... on NoteClockItem {\n            ...CommonClockItemFields\n            label\n            content\n          }\n          ... on AdBreakClockItem {\n            ...CommonClockItemFields\n            scheduledStartTime\n          }\n          ... on CommandClockItem {\n            ...CommonClockItemFields\n            command\n          }\n        }\n      }\n    }\n  }\n\n  fragment CommonClockItemFields on ClockItemInterface {\n    id\n    clockId\n    createdAt\n    duration\n    orderIndex\n    updatedAt\n  }\n": typeof types.UpdateMusicClockDocument,
    "\n  mutation UpdateNetwork($input: UpdateNetworkInput!) {\n    updateNetwork(input: $input) {\n      success\n      message\n      network {\n        id\n        name\n        code\n        baseUrl\n        imagesUrl\n        logoSvg\n        logoSvgCircular\n        logoSvgColor\n        logoSvgIcon\n        networkType\n        tagline\n        cssUrl\n        playFormat\n        playUrl\n        shortId\n      }\n    }\n  }\n": typeof types.UpdateNetworkDocument,
    "\n  mutation UpdatePresenter($input: UpdatePresenterInput!) {\n    updatePresenter(input: $input) {\n      presenter {\n        id\n        name\n        bio\n        shortBio\n        hidden\n        hero\n        picture\n        networks {\n          id\n          name\n          logoSvgIcon\n        }\n      }\n    }\n  }\n": typeof types.UpdatePresenterDocument,
    "\n  mutation UpdateScheduleItem($input: UpdateScheduleItemInput!) {\n    updateScheduleItem(input: $input) {\n      scheduleItem {\n        id\n        end\n        start\n        networks {\n          id\n          name\n        }\n        episode {\n          id\n          name\n          show {\n            shortName\n          }\n          description\n          broadcasts {\n            id\n            start\n            end\n          }\n          featuredImage {\n            urls {\n              square\n              customSquare(size: 150)\n            }\n          }\n          networks {\n            id\n            logoSvgIcon\n          }\n        }\n      }\n    }\n  }\n": typeof types.UpdateScheduleItemDocument,
    "\n  mutation UpdateScheduleTemplate($input: UpdateDefaultScheduleInput!) {\n    updateDefaultSchedule(input: $input) {\n      defaultSchedule {\n        id\n        name\n        assignedTo\n        networks {\n          id\n          name\n          code\n        }\n      }\n    }\n  }\n": typeof types.UpdateScheduleTemplateDocument,
    "\n  mutation UpdateSeries($input: UpdateSeriesInput!) {\n    updateSeries(input: $input) {\n      series {\n        id\n        fullName\n        shortName\n        fullDesc\n        shortDesc\n        archived\n        featuredImage {\n          id\n          key\n          type\n          mimeType\n          fileSize {\n            label\n            raw\n          }\n          urls {\n            medium\n            square\n          }\n        }\n        show {\n          id\n          shortName\n          fullName\n        }\n        network {\n          id\n          name\n        }\n      }\n    }\n  }\n": typeof types.UpdateSeriesDocument,
    "\n  mutation UpdateShow($input: UpdateShowInput!) {\n    updateShow(input: $input) {\n      show {\n        id\n        fullName\n        shortName\n        fullDesc\n        shortDesc\n        hidden\n        extraData\n        featuredImage {\n            id\n            key\n            type\n            mimeType\n            fileSize {\n                label\n                raw\n            }\n            urls {\n                medium\n                square\n            }\n        }\n        networks {\n          id\n          name\n          logoSvgIcon\n        }\n        presenters {\n          id\n          name\n        }\n        series {\n          items {\n            id\n            fullName\n          }\n        }\n        totalEpisodes\n        createdAt\n        updatedAt\n        url\n      }\n    }\n  }\n": typeof types.UpdateShowDocument,
    "\n  mutation UpdateTemplateAssignment($input: UpdateMusicAssignmentInput!) {\n    updateMusicAssignment(input: $input) {\n      success\n      message\n      assignment {\n        id\n        isTemplate\n        clockId\n        dayOfWeek\n        hour\n        clock {\n          id\n          name\n          color\n          targetRuntime\n        }\n      }\n    }\n  }\n": typeof types.UpdateTemplateAssignmentDocument,
    "\n  mutation UpdateTrack($input: UpdateTrackInput!) {\n    updateTrack(input: $input) {\n      success\n      message\n      track {\n        id\n        title\n        artist\n        album\n        year\n        genre {\n          id\n          name\n        }\n        subcategory {\n          id\n          name\n          category {\n            id\n            name\n          }\n        }\n        isrc\n        label\n        copyright\n        composer\n        publisher\n        image\n        metadata {\n          id\n          key\n          value\n        }\n        enabled\n        dateAdded\n        dateModified\n      }\n    }\n  }\n": typeof types.UpdateTrackDocument,
    "\n  mutation UpdateTrackMetadata($input: UpdateTrackMetadataInput!) {\n    updateTrackMetadata(input: $input) {\n      success\n      message\n      track {\n        id\n        metadata {\n          id\n          key\n          value\n        }\n      }\n    }\n  }\n": typeof types.UpdateTrackMetadataDocument,
    "\n  query GetCategories {\n    categories {\n      id\n      name\n      subcategories {\n        id\n        name\n        averageDuration {\n          raw\n          formatted\n        }\n      }\n    }\n  }\n": typeof types.GetCategoriesDocument,
    "\n\tquery Debug {\n\t\tdebug {\n\t\t\tid\n\t\t\tstatus\n\t\t\trandomShow {\n\t\t\t\tid\n\t\t\t\tshortName\n\t\t\t\tepisodes {\n\t\t\t\t\ttotal\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n": typeof types.DebugDocument,
    "\n    query SearchDefaultSchedule($filters: DefaultScheduleListInput!) {\n        defaultSchedules(\n            filters: $filters\n        ) {\n      total\n      items {\n        id\n        assignedTo\n        name\n        networks {\n            id\n            name\n            logoSvgIcon\n        }\n        items {\n          id\n          start\n          end\n          episodeName\n          media {\n            id\n            urls {\n              customSquare(size: 120)\n            }\n          }\n          show {\n            id\n            shortName\n            featuredImage {\n              urls {\n                customSquare(size: 120)\n              }\n            }\n          }\n        }\n      }\n    }\n}": typeof types.SearchDefaultScheduleDocument,
    "\n  query GetDefaultSchedules($filters: DefaultScheduleListInput!) {\n    defaultSchedules(filters: $filters) {\n      total\n      items {\n        id\n        name\n        assignedTo\n        networks {\n          id\n          name\n          logoSvgIcon\n        }\n        items {\n          id\n          start\n          end\n          episodeName\n          media {\n            id\n            urls {\n              customSquare(size: 120)\n            }\n          }\n          show {\n            id\n            shortName\n            featuredImage {\n              urls {\n                customSquare(size: 120)\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetDefaultSchedulesDocument,
    "\n  query GetDefaultSchedule($id: ID!) {\n    defaultSchedule(id: $id) {\n      id\n      name\n      assignedTo\n      networks {\n        id\n        name\n        code\n      }\n      items {\n        id\n        start\n        end\n        endsNextDay\n        episodeName\n        episodeDesc\n        show {\n          id\n          fullName\n          shortName\n          featuredImage {\n            urls {\n              customSquare(size: 120)\n            }\n          }\n        }\n        series {\n          id\n          fullName\n          shortName\n        }\n        presenters {\n          id\n          name\n        }\n        media {\n          id\n          key\n          urls {\n            medium\n            original\n          }\n        }\n        networks {\n          id\n          name\n          code\n          logoSvgIcon\n        }\n        existingEpisode {\n          id\n          name\n          description\n        }\n        repeatOf {\n          id\n          episodeName\n        }\n      }\n    }\n  }\n": typeof types.GetDefaultScheduleDocument,
    "\n  query SearchEpisodes($filters: EpisodeListInput) {\n    episodes(filters: $filters) {\n      items {\n        id\n        name\n        show {\n          id\n          shortName\n        }\n      }\n    }\n  }\n": typeof types.SearchEpisodesDocument,
    "\n  query SearchEpisodesV2($filters: EpisodeListInputV2) {\n    episodesV2(filters: $filters) {\n      total\n      items {\n        id\n        shortId\n        name\n        description\n        createdAt\n        updatedAt\n        duration {\n          formatted\n          raw\n        }\n        featuredImage {\n          urls {\n            square\n          }\n        }\n        show {\n          id\n          shortName\n          shortId\n        }\n        presenters {\n          id\n          name\n        }\n        networks {\n          id\n          name\n          logoSvgIcon\n        }\n        series {\n          id\n          shortName\n        }\n        broadcasts {\n          id\n          start\n          end\n        }\n      }\n    }\n  }\n": typeof types.SearchEpisodesV2Document,
    "\n  query GetEpisode($id: ID!) {\n    episode(id: $id) {\n      id\n      name\n      description\n      duration {\n        formatted\n        raw\n      }\n      extraData\n      shortId\n      createdAt\n      updatedAt\n      url\n      featuredImage {\n        id\n        key\n        type\n        mimeType\n        fileSize {\n          label\n          raw\n        }\n        urls {\n          medium\n          square\n        }\n      }\n      show {\n        id\n        shortName\n      }\n      series {\n        id\n        shortName\n      }\n      presenters {\n        id\n        name\n      }\n      networks {\n        id\n        name\n        logoSvgIcon\n      }\n    }\n  }\n": typeof types.GetEpisodeDocument,
    "\n  query GetEpisodeDetails($id: ID!) {\n    episode(id: $id) {\n    \tid\n      name\n      show {\n        id\n        shortName\n      }\n      description\n      broadcasts {\n        id\n      }\n      featuredImage {\n        urls {\n          square\n          customSquare(size: 150)\n        }\n      }\n      networks {\n        id\n        logoSvgIcon\n      }\n    }\n  }\n": typeof types.GetEpisodeDetailsDocument,
    "\n  query GetGenres($filters: GenreListInputV2) {\n      genresV2(filters: $filters) {\n        items {\n          id\n          name\n        }\n      }\n  }\n": typeof types.GetGenresDocument,
    "\n  query GetJobs($limit: Int, $status: JobStatus, $type: JobType) {\n    jobs(limit: $limit, status: $status, type: $type) {\n      id\n      type\n      status\n      sourceUrl\n      searchQuery\n      progress\n      errorMessage\n      songId\n      createdAt\n      updatedAt\n      completedAt\n    }\n  }\n": typeof types.GetJobsDocument,
    "\n  query GetJob($id: ID!) {\n    job(id: $id) {\n      id\n      type\n      status\n      sourceUrl\n      searchQuery\n      progress\n      errorMessage\n      songId\n      createdAt\n      updatedAt\n      completedAt\n    }\n  }\n": typeof types.GetJobDocument,
    "\n  query GetMedia($id: ID!) {\n    media(id: $id) {\n      id\n      key\n      type\n      mimeType\n      fileSize {\n        label\n        raw\n      }\n      urls {\n        medium\n        square\n      }\n    }\n  }\n": typeof types.GetMediaDocument,
    "\n  query SearchMedia($filters: MediaListInput) {\n    mediaList(filters: $filters) {\n      total\n      items {\n        id\n        key\n        type\n        mimeType\n        fileSize {\n          label\n          raw\n        }\n        urls {\n          medium\n          square\n        }\n      }\n    }\n  }\n": typeof types.SearchMediaDocument,
    "\n  query GetMusicClockAssignments($networkId: ID!, $filters: MusicAssignmentFilters) {\n    musicClockAssignments(networkId: $networkId, filters: $filters) {\n      id\n      clock {\n        id\n        name\n        targetRuntime\n      }\n      dayOfWeek\n      hour\n      startDate\n      endDate\n      priority\n      isTemplate\n      network {\n        id\n        name\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.GetMusicClockAssignmentsDocument,
    "\n  query GetMusicPlaylists($networkId: ID!, $filters: MusicPlaylistFilters!) {\n    musicPlaylists(networkId: $networkId, filters: $filters) {\n      id\n      shortId\n      scheduledDate\n      scheduledHour\n      status\n      totalDuration\n      estimatedDuration\n      isLocked\n      notes\n      clock {\n        id\n        name\n      }\n      items {\n        id\n        orderIndex\n        itemType\n        track {\n          id\n          title\n          artist\n          duration {\n            formatted\n          }\n        }\n        scheduledStart\n        scheduledEnd\n        actualDuration\n        isManualEdit\n        notes\n      }\n      ruleViolations {\n        id\n        rule {\n          id\n          name\n          ruleType\n        }\n        severity\n        description\n        suggestedFix\n        autoFixAvailable\n      }\n      network {\n        id\n        name\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.GetMusicPlaylistsDocument,
    "\n  query GetMusicClocks($networkId: ID!, $filters: MusicClockFilters) {\n    musicClocks(networkId: $networkId, filters: $filters) {\n      id\n      name\n      description\n      color\n      targetRuntime\n      network {\n        id\n        name\n        logoSvgIcon\n      }\n      createdAt\n      updatedAt\n      items {\n        ... on TrackClockItem {\n          ...CommonClockItemFields\n          track {\n            id\n            title\n          }\n        }\n        ... on SubcategoryClockItem {\n          ...CommonClockItemFields\n          subcategory {\n            id\n            name\n            category {\n              id\n              name\n            }\n          }\n        }\n        ... on GenreClockItem {\n          ...CommonClockItemFields\n          genre {\n            id\n            name\n          }\n        }\n        ... on NoteClockItem {\n          ...CommonClockItemFields\n          label\n          content\n        }\n        ... on AdBreakClockItem {\n          ...CommonClockItemFields\n          scheduledStartTime\n        }\n        ... on CommandClockItem {\n          ...CommonClockItemFields\n          command\n        }\n      }\n    }\n  }\n\n  fragment CommonClockItemFields on ClockItemInterface {\n    id\n    clockId\n    createdAt\n    duration\n    orderIndex\n    updatedAt\n  }\n": typeof types.GetMusicClocksDocument,
    "\n  query GetMusicClock($id: ID!) {\n    musicClock(id: $id) {\n      id\n      name\n      description\n      color\n      targetRuntime\n      network {\n        id\n        name\n      }\n      createdAt\n      updatedAt\n      items {\n        ...on TrackClockItem {\n          ...CommonClockItemFields,\n          track {\n            id\n            title\n          }\n        }\n        ... on SubcategoryClockItem {\n          ...CommonClockItemFields,\n          subcategory {\n            id\n            name\n            category {\n              id\n              name\n            }\n          }\n        }\n        ... on GenreClockItem {\n          ...CommonClockItemFields,\n          genre {\n            id\n            name\n          }\n        }\n        ... on NoteClockItem {\n          ...CommonClockItemFields\n          label\n          content\n        }\n        ... on AdBreakClockItem {\n          ...CommonClockItemFields\n          scheduledStartTime\n        }\n        ... on CommandClockItem {\n          ...CommonClockItemFields\n          command\n        }\n      }\n    }\n  }\n\nfragment CommonClockItemFields on ClockItemInterface {\n\tid\n\tclockId\n\tcreatedAt\n\tduration\n\torderIndex\n\tupdatedAt\n}\n": typeof types.GetMusicClockDocument,
    "\n  query GetMusicRules($networkId: ID, $filters: MusicRuleFilters) {\n    musicRules(networkId: $networkId, filters: $filters) {\n      id\n      name\n      description\n      ruleType\n      breakable\n      value\n      unit\n      criteria {\n        categories\n        genres\n        artists\n        tags\n        timeWindows {\n          startHour\n          endHour\n          daysOfWeek\n        }\n      }\n      priority\n      isActive\n      network {\n        id\n        name\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.GetMusicRulesDocument,
    "\n  query GetMusicRule($id: ID!) {\n    musicRule(id: $id) {\n      id\n      name\n      description\n      ruleType\n      breakable\n      value\n      unit\n      criteria {\n        categories\n        genres\n        artists\n        tags\n        timeWindows {\n          startHour\n          endHour\n          daysOfWeek\n        }\n      }\n      priority\n      isActive\n      network {\n        id\n        name\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.GetMusicRuleDocument,
    "\n  query MusicSchedules($networkId: ID!, $startDate: Date!, $endDate: Date!) {\n    musicSchedules(networkId: $networkId, startDate: $startDate, endDate: $endDate) {\n      id\n      networkId\n      scheduledDate\n      hour\n      clockId\n      playlistName\n      exportedToRadioDj\n      ruleViolations {\n        ruleId\n        ruleName\n        ruleType\n        severity\n        description\n        conflictTrackId\n        conflictTime\n      }\n      items {\n        id\n        orderIndex\n        itemType\n        trackId\n        track {\n          id\n          title\n          artist\n          duration {\n            formatted\n          }\n        }\n        noteContent\n        duration\n        startTime\n        ruleViolations {\n          ruleId\n          ruleName\n          ruleType\n          severity\n          description\n          conflictTrackId\n          conflictTime\n        }\n      }\n      clock {\n        id\n        name\n        color\n        targetRuntime\n      }\n    }\n  }\n": typeof types.MusicSchedulesDocument,
    "\n  query WeeklyOverrides($networkId: ID!, $templateId: ID!, $weekCommencing: String!) {\n    musicClockWeeklyOverrides(networkId: $networkId, templateId: $templateId, weekCommencing: $weekCommencing) {\n      id\n      networkId\n      templateId\n      clockId\n      weekCommencing\n      dayOfWeek\n      hour\n      reason\n      clock {\n        id\n        name\n        color\n        targetRuntime\n      }\n    }\n  }\n": typeof types.WeeklyOverridesDocument,
    "\n\tquery GetNetworks {\n\t\tnetworks {\n\t\t\tid\n\t\t\tname\n\t\t\tcode\n\t\t\tbaseUrl\n\t\t\timagesUrl\n\t\t\tlogoSvg\n\t\t\tlogoSvgCircular\n\t\t\tlogoSvgColor\n\t\t\tlogoSvgIcon\n\t\t\tnetworkType\n\t\t\ttagline\n\t\t\tcssUrl\n\t\t\tplayFormat\n\t\t\tplayUrl\n\t\t\tshortId\n\t\t}\n\t}\n": typeof types.GetNetworksDocument,
    "\n\tquery GetNetwork($id: ID!) {\n\t\tnetwork(id: $id) {\n\t\t\tid\n\t\t\tname\n\t\t\tcode\n\t\t\tbaseUrl\n\t\t\timagesUrl\n\t\t\tlogoSvg\n\t\t\tlogoSvgCircular\n\t\t\tlogoSvgColor\n\t\t\tlogoSvgIcon\n\t\t\tnetworkType\n\t\t\ttagline\n\t\t\tcssUrl\n\t\t\tplayFormat\n\t\t\tplayUrl\n\t\t\tshortId\n\t\t}\n\t}\n": typeof types.GetNetworkDocument,
    "\n\tquery GetPresenters($filters: PresenterListInputV2) {\n\t\tpresentersV2(filters: $filters) {\n\t\t\ttotal\n            items {\n                id\n                name\n                picture\n                hidden\n                networks {\n                    id\n                    name\n                    logoSvgIcon\n                }\n            }\n\t\t}\n\t}\n": typeof types.GetPresentersDocument,
    "\n\tquery GetPresenter($id: ID!) {\n\t\tpresenter(id: $id) {\n            id\n            name\n            bio\n            hero\n            hidden\n            shortBio\n            picture\n            shows {\n                total\n                \n            }\n            episodes {\n                total    \n            }\n            networks {\n                id\n            }\n\t\t}\n\t}\n": typeof types.GetPresenterDocument,
    "\n    query Schedule(\n\t$from: DateTime!\n\t$network: ID!\n\t$to: DateTime\n) {\n\tschedule(\n\t\tfilters: { from: $from, networkId: $network, to: $to, amount: 200 }\n\t) {\n\t\ttotal\n\t\titems {\n\t\t\tid\n\t\t\tstart\n\t\t\tend\n\t\t\tnetworks {\n\t\t\t\tid\n                name\n                logoSvgIcon\n\t\t\t}\n\t\t\tepisode {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\tshow {\n\t\t\t\t\tid\n\t\t\t\t\tshortName\n\t\t\t\t}\n\t\t\t\tdescription\n\t\t\t\tbroadcasts {\n\t\t\t\t\tid\n\t\t\t\t}\n\t\t\t\tfeaturedImage {\n\t\t\t\t\turls {\n\t\t\t\t\t\tsquare\n\t\t\t\t\t\tcustomSquare(size: 150)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnetworks {\n\t\t\t\t\tid\n\t\t\t\t\tlogoSvgIcon\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n": typeof types.ScheduleDocument,
    "\n  query SearchSeries($filters: SeriesListInputV2) {\n    seriesListV2(filters: $filters) {\n      total\n      items {\n        id\n        shortName\n        fullName\n        archived\n        show {\n          id\n          shortName\n        }\n        network {\n          id\n          name\n          logoSvgIcon\n        }\n      }\n    }\n  }\n": typeof types.SearchSeriesDocument,
    "\n  query GetSeries($id: ID!) {\n    series(id: $id) {\n      id\n      shortName\n      fullName\n      shortDesc\n      fullDesc\n      archived\n      show {\n        id\n        shortName\n        fullName\n      }\n      network {\n        id\n        name\n      }\n      featuredImage {\n        id\n        key\n        urls {\n          medium\n          square\n        }\n      }\n    }\n  }\n": typeof types.GetSeriesDocument,
    "\n  query SearchShows($filters: ShowListInputV2) {\n    showsV2(filters: $filters) {\n      total\n      items {\n        id\n        shortId\n        shortName\n        fullName\n        featuredImage {\n          urls {\n            square\n          }\n        }\n        presenters {\n            id\n            name\n        }\n        networks {\n            id\n            name\n            logoSvgIcon\n        }\n        hidden\n      }\n    }\n  }\n": typeof types.SearchShowsDocument,
    "\n  query GetShow($id: ID!) {\n    show(id: $id) {\n      createdAt\n      extraData\n      featuredImage {\n          id\n          key\n          type\n          mimeType\n          fileSize {\n              label\n              raw\n          }\n          urls {\n              medium\n              square\n          }\n      }\n      fullDesc\n      fullName\n      hidden\n      id\n      networks {\n        id\n        name\n        logoSvgIcon\n      }\n      presenters {\n        id\n        name\n      }\n      series {\n        items {\n          id\n          fullName\n        }\n      }\n      shortDesc\n      shortId\n      shortName\n      totalEpisodes\n      updatedAt\n      url\n    }\n  }\n": typeof types.GetShowDocument,
    "\n  query SearchTracks($filters: TrackListInput) {\n    tracks(filters: $filters) {\n      items {\n        id\n        artist\n        title\n        album\n        duration {\n          formatted\n          raw\n        }\n        path\n        enabled\n        year\n        genre {\n          name\n        }\n        isrc\n        bpm\n        dateAdded\n        dateModified\n      }\n      total\n    }\n  }\n": typeof types.SearchTracksDocument,
    "\n  query SearchTracksV2($filters: TrackListInputV2) {\n    tracksV2(filters: $filters) {\n      items {\n        id\n        artist\n        title\n        album\n        duration {\n          formatted\n          raw\n        }\n        path\n        enabled\n        year\n        genre {\n          id\n          name\n        }\n        subcategory {\n          id\n          name\n          category {\n            id\n            name\n          }\n        }\n        metadata {\n          id\n        }\n        isrc\n        bpm\n        dateAdded\n        dateModified\n      }\n      total\n    }\n  }\n": typeof types.SearchTracksV2Document,
    "\n  query GetTrack($id: ID!) {\n    track(id: $id) {\n      id\n      artist\n      title\n      album\n      duration {\n        formatted\n        raw\n      }\n      path\n      enabled\n      year\n      genre {\n        id\n        name\n      }\n      subcategory {\n        id\n        name\n        category {\n          id\n          name\n        }\n      }\n      isrc\n      bpm\n      dateAdded\n      dateModified\n      label\n      copyright\n      composer\n      publisher\n      image\n      metadata {\n        id\n        key\n        value\n      }\n    }\n  }\n": typeof types.GetTrackDocument,
    "\n  mutation SearchYouTube($query: String!) {\n    searchYouTube(query: $query) {\n      url\n      title\n      artist\n      duration\n      thumbnail\n      description\n    }\n  }\n": typeof types.SearchYouTubeDocument,
    "\n  mutation BulkSearchYouTube($input: BulkSearchYouTubeInput!) {\n    bulkSearchYouTube(input: $input) {\n      success\n      message\n      results {\n        query\n        results {\n          url\n          title\n          artist\n          duration\n          thumbnail\n          description\n        }\n        error\n      }\n      totalQueries\n      successfulQueries\n      failedQueries\n    }\n  }\n": typeof types.BulkSearchYouTubeDocument,
    "\n  query SearchMusicBrainz($input: MusicBrainzSearchInput!) {\n    searchMusicBrainz(input: $input) {\n      # Core recording identification\n      id\n      recordingId\n\n      # Core metadata (with Picard scoring weights)\n      title\n      artist\n      artistId\n      artistSortOrder\n\n      # Full artist credits array\n      artists {\n        id\n        name\n        sortName\n        joinPhrase\n      }\n\n      # Track metadata\n      length\n\n      # Industry identifiers\n      isrc\n\n      # Enhanced scoring\n      score\n\n      # Nested releases for this recording\n      releases {\n        # Core release identification\n        id\n        releaseId\n        releaseGroupId\n\n        # Core metadata\n        album\n\n        # Track information within this release\n        trackNumber\n        totalTracks\n        discNumber\n        totalDiscs\n\n        # Release information\n        date\n        originalDate\n        year\n        country\n\n        # Release categorization\n        releaseType\n        releaseStatus\n\n        # Industry identifiers\n        barcode\n\n        # Additional metadata\n        albumArtistSortOrder\n        media\n        label # Resolved via field resolver using DataLoader\n\n        # MusicBrainz IDs for linking\n        releaseArtistId\n        trackId\n\n        # Enhanced scoring for this specific release\n        score\n      }\n\n      # Dynamic metadata fields\n      dynamicFields {\n        key\n        value\n      }\n    }\n  }\n": typeof types.SearchMusicBrainzDocument,
    "\n  mutation BulkSearchMusicBrainz($input: BulkSearchMusicBrainzInput!) {\n    bulkSearchMusicBrainz(input: $input) {\n      success\n      message\n      results {\n        id\n        query {\n          artist\n          title\n          album\n        }\n        results {\n          id\n          title\n          artist\n          score\n        }\n        error\n      }\n      totalSearches\n      successfulSearches\n      failedSearches\n    }\n  }\n": typeof types.BulkSearchMusicBrainzDocument,
};
const documents: Documents = {
    "\n  mutation ApplyAssignedDefaultSchedule(\n    $networkId: ID!\n    $date: DateTime!\n    $assignedTo: [DayOfWeek!]!\n  ) {\n    applyAssignedDefaultSchedule(\n      input: { networkId: $networkId, date: $date, assignedTo: $assignedTo }\n    ) {\n      success\n      message\n    }\n  }\n": types.ApplyAssignedDefaultScheduleDocument,
    "\n  mutation ApplyDefaultSchedule($defaultScheduleId: ID!, $date: DateTime!) {\n    applyDefaultSchedule(\n      input: { defaultSchedule: $defaultScheduleId, date: $date }\n    ) {\n      success\n      message\n    }\n  }\n": types.ApplyDefaultScheduleDocument,
    "\n  mutation AssignDefaultScheduleToNetwork($input: AssignDefaultScheduleToNetworkInput!) {\n    assignDefaultScheduleToNetwork(input: $input) {\n      success\n      message\n    }\n  }\n": types.AssignDefaultScheduleToNetworkDocument,
    "\n  mutation AssignMusicClock($input: AssignMusicClockInput!) {\n    assignMusicClock(input: $input) {\n      assignment {\n        id\n        clock {\n          id\n          name\n          targetRuntime\n        }\n        dayOfWeek\n        hour\n        priority\n        isTemplate\n        network {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.AssignMusicClockDocument,
    "\n  mutation StartMusicSchedulingJob($input: StartMusicSchedulingJobInput!) {\n    startMusicSchedulingJob(input: $input) {\n      job {\n        id\n        status\n        type\n        progress\n        createdAt\n      }\n    }\n  }\n": types.StartMusicSchedulingJobDocument,
    "\n  mutation BulkDeleteDefaultScheduleItems($input: BulkDeleteDefaultScheduleItemsInput!) {\n    bulkDeleteDefaultScheduleItems(input: $input) {\n      success\n      successCount\n      failureCount\n      totalItems\n      deletedIds\n      failedItems {\n        id\n        error\n      }\n    }\n  }\n": types.BulkDeleteDefaultScheduleItemsDocument,
    "\n  mutation BulkUpsertDefaultScheduleItems($input: BulkUpsertDefaultScheduleItemsInput!) {\n    bulkUpsertDefaultScheduleItems(input: $input) {\n      success\n      successCount\n      failureCount\n      totalItems\n      upsertedItems {\n        id\n        start\n        end\n        endsNextDay\n        episodeName\n        episodeDesc\n        show {\n          id\n          shortName\n        }\n        series {\n          id\n          shortName\n        }\n        presenters {\n          id\n          name\n        }\n        networks {\n          id\n          name\n        }\n        existingEpisode {\n          id\n          name\n        }\n        repeatOf {\n          id\n        }\n      }\n      failedItems {\n        id\n        error\n      }\n    }\n  }\n": types.BulkUpsertDefaultScheduleItemsDocument,
    "\n  mutation CreateEpisode($input: CreateEpisodeInput!) {\n    createEpisode(input: $input) {\n      episode {\n        id\n        name\n        description\n        duration {\n          formatted\n          raw\n        }\n        extraData\n        shortId\n        createdAt\n        updatedAt\n        url\n        featuredImage {\n          id\n          key\n          urls {\n            medium\n            square\n          }\n        }\n        show {\n          id\n          shortName\n          fullName\n        }\n        series {\n          id\n          fullName\n        }\n        presenters {\n          id\n          name\n        }\n        networks {\n          id\n          name\n          logoSvgIcon\n        }\n      }\n    }\n  }\n": types.CreateEpisodeDocument,
    "\n  mutation CreateGenre($input: CreateGenreInput!) {\n    createGenre(input: $input) {\n      success\n      message\n      genre {\n        id\n        name\n      }\n    }\n  }\n": types.CreateGenreDocument,
    "\n  mutation CreateMusicClock($input: CreateMusicClockInput!) {\n    createMusicClock(input: $input) {\n      success\n      message\n      clock {\n        id\n        name\n        description\n        color\n        targetRuntime\n        network {\n          id\n          name\n        }\n        items {\n          ... on TrackClockItem {\n            ...CommonClockItemFields\n            track {\n              id\n              title\n            }\n          }\n          ... on SubcategoryClockItem {\n            ...CommonClockItemFields\n            subcategory {\n              id\n              name\n              category {\n                id\n                name\n              }\n            }\n          }\n          ... on GenreClockItem {\n            ...CommonClockItemFields\n            genre {\n              id\n              name\n            }\n          }\n          ... on NoteClockItem {\n            ...CommonClockItemFields\n            label\n            content\n          }\n          ... on AdBreakClockItem {\n            ...CommonClockItemFields\n            scheduledStartTime\n          }\n          ... on CommandClockItem {\n            ...CommonClockItemFields\n            command\n          }\n        }\n      }\n    }\n  }\n\n  fragment CommonClockItemFields on ClockItemInterface {\n    id\n    clockId\n    createdAt\n    duration\n    orderIndex\n    updatedAt\n  }\n": types.CreateMusicClockDocument,
    "\n  mutation CreateMusicRule($input: CreateMusicRuleInput!) {\n    createMusicRule(input: $input) {\n      success\n      message\n      rule {\n        id\n        name\n        description\n        ruleType\n        breakable\n        value\n        unit\n        criteria {\n          categories\n          genres\n          artists\n          tags\n          timeWindows {\n            startHour\n            endHour\n            daysOfWeek\n          }\n        }\n        priority\n        isActive\n        network {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.CreateMusicRuleDocument,
    "\n  mutation CreateNetwork($input: CreateNetworkInput!) {\n    createNetwork(input: $input) {\n      success\n      message\n      network {\n        id\n        name\n        code\n        baseUrl\n        imagesUrl\n        logoSvg\n        logoSvgCircular\n        logoSvgColor\n        logoSvgIcon\n        networkType\n        tagline\n        cssUrl\n        playFormat\n        playUrl\n        shortId\n      }\n    }\n  }\n": types.CreateNetworkDocument,
    "\n  mutation CreatePresenter($input: CreatePresenterInput!) {\n    createPresenter(input: $input) {\n      presenter {\n        id\n        name\n        bio\n        shortBio\n        hidden\n        hero\n        picture\n        networks {\n          id\n          name\n          logoSvgIcon\n        }\n      }\n    }\n  }\n": types.CreatePresenterDocument,
    "\n  mutation CreateScheduleItem($input: CreateScheduleItemInput!) {\n    createScheduleItem(input: $input) {\n      scheduleItem {\n        id\n        end\n        start\n        networks {\n          id\n          name\n        }\n        episode {\n          id\n          name\n          show {\n            shortName\n          }\n          description\n          broadcasts {\n            id\n            start\n            end\n          }\n          featuredImage {\n            urls {\n              square\n              customSquare(size: 150)\n            }\n          }\n          networks {\n            id\n            logoSvgIcon\n          }\n        }\n      }\n    }\n  }\n": types.CreateScheduleItemDocument,
    "\n  mutation CreateScheduleTemplate($input: CreateDefaultScheduleInput!) {\n    createDefaultSchedule(input: $input) {\n      defaultSchedule {\n        id\n        name\n        assignedTo\n        networks {\n          id\n          name\n          code\n        }\n      }\n    }\n  }\n": types.CreateScheduleTemplateDocument,
    "\n  mutation CreateSeries($input: CreateSeriesInput!) {\n    createSeries(input: $input) {\n      series {\n        id\n        fullName\n        shortName\n        fullDesc\n        shortDesc\n        archived\n        featuredImage {\n          id\n          key\n          type\n          mimeType\n          fileSize {\n            label\n            raw\n          }\n          urls {\n            medium\n            square\n          }\n        }\n        show {\n          id\n          shortName\n          fullName\n        }\n        network {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.CreateSeriesDocument,
    "\n  mutation CreateShow($input: CreateShowInput!) {\n    createShow(input: $input) {\n      show {\n        id\n        fullName\n        shortName\n        fullDesc\n        shortDesc\n        hidden\n        extraData\n        featuredImage {\n          id\n          key\n          urls {\n            medium\n            square\n          }\n        }\n        networks {\n          id\n          name\n          logoSvgIcon\n        }\n        presenters {\n          id\n          name\n        }\n        series {\n          items {\n            id\n            fullName\n          }\n        }\n        totalEpisodes\n        createdAt\n        updatedAt\n        url\n      }\n    }\n  }\n": types.CreateShowDocument,
    "\n  mutation DeleteWeeklyOverride($id: ID!) {\n    removeWeeklyOverride(id: $id) {\n      success\n      message\n    }\n  }\n": types.DeleteWeeklyOverrideDocument,
    "\n  mutation DeleteEpisode($input: DeleteEpisodeInput!) {\n    deleteEpisode(input: $input) {\n      success\n      message\n    }\n  }\n": types.DeleteEpisodeDocument,
    "\n  mutation DeleteMedia($input: DeleteMediaInput!) {\n    deleteMedia(input: $input) {\n      success\n      message\n    }\n  }\n": types.DeleteMediaDocument,
    "\n  mutation DeletePresenter($input: DeletePresenterInput!) {\n    deletePresenter(input: $input) {\n      success\n      message\n    }\n  }\n": types.DeletePresenterDocument,
    "\n  mutation DeleteScheduleItem($input: DeleteScheduleItemInput!) {\n    deleteScheduleItem(input: $input) {\n        success\n    }\n  }\n": types.DeleteScheduleItemDocument,
    "\n  mutation DeleteScheduleTemplate($input: DeleteDefaultScheduleInput!) {\n    deleteDefaultSchedule(input: $input) {\n      success\n      message\n    }\n  }\n": types.DeleteScheduleTemplateDocument,
    "\n  mutation DeleteSeries($input: DeleteSeriesInput!) {\n    deleteSeries(input: $input) {\n      success\n      message\n    }\n  }\n": types.DeleteSeriesDocument,
    "\n  mutation DeleteShow($input: DeleteShowInput!) {\n    deleteShow(input: $input) {\n      success\n      message\n    }\n  }\n": types.DeleteShowDocument,
    "\n  mutation DeleteTrack($input: DeleteTrackInput!) {\n    deleteTrack(input: $input) {\n      success\n      message\n    }\n  }\n": types.DeleteTrackDocument,
    "\n  mutation CreateDownloadJob($input: DownloadJobInput!) {\n    createDownloadJob(input: $input) {\n      id\n      status\n      sourceUrl\n      searchQuery\n      createdAt\n    }\n  }\n": types.CreateDownloadJobDocument,
    "\n  mutation CreateBulkDownloadJobs($input: BulkDownloadJobsInput!) {\n    createBulkDownloadJobs(input: $input) {\n      success\n      message\n      results {\n        id\n        url\n        jobId\n        success\n        error\n      }\n      totalJobs\n      successfulJobs\n      failedJobs\n    }\n  }\n": types.CreateBulkDownloadJobsDocument,
    "\n  mutation CancelJob($id: ID!) {\n    cancelJob(id: $id)\n  }\n": types.CancelJobDocument,
    "\n  mutation DuplicateScheduleTemplate($input: DuplicateDefaultScheduleInput!) {\n    duplicateDefaultSchedule(input: $input) {\n      defaultSchedule {\n        id\n        name\n        assignedTo\n        networks {\n          id\n          name\n          code\n        }\n      }\n    }\n  }\n": types.DuplicateScheduleTemplateDocument,
    "\n  mutation CreateEnrichmentJob($input: EnrichmentJobInput!) {\n    createEnrichmentJob(input: $input) {\n      id\n      status\n      progress\n      createdAt\n    }\n  }\n": types.CreateEnrichmentJobDocument,
    "\n  mutation EnrichPendingJob($input: EnrichPendingJobInput!) {\n    enrichPendingJob(input: $input) {\n      id\n      status\n      progress\n      updatedAt\n    }\n  }\n": types.EnrichPendingJobDocument,
    "\n  mutation RetryJob($id: ID!) {\n    retryJob(id: $id) {\n      id\n      status\n      progress\n      updatedAt\n    }\n  }\n": types.RetryJobDocument,
    "\n  mutation CreateMusicClockTemplate($input: CreateMusicClockTemplateInput!) {\n    createMusicClockTemplate(input: $input) {\n      success\n      message\n      template {\n        id\n        name\n        description\n        isDefault\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": types.CreateMusicClockTemplateDocument,
    "\n  mutation UpdateMusicClockTemplate($input: UpdateMusicClockTemplateInput!) {\n    updateMusicClockTemplate(input: $input) {\n      success\n      message\n      template {\n        id\n        name\n        description\n        isDefault\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": types.UpdateMusicClockTemplateDocument,
    "\n  mutation DeleteMusicClockTemplate($id: ID!) {\n    deleteMusicClockTemplate(id: $id) {\n      success\n      message\n    }\n  }\n": types.DeleteMusicClockTemplateDocument,
    "\n  mutation SetDefaultMusicClockTemplate($networkId: ID!, $templateId: ID!) {\n    setDefaultMusicClockTemplate(networkId: $networkId, templateId: $templateId) {\n      success\n      message\n    }\n  }\n": types.SetDefaultMusicClockTemplateDocument,
    "\n  mutation AssignClockToTemplate($input: AssignClockToTemplateInput!) {\n    assignClockToTemplate(input: $input) {\n      success\n      message\n      assignment {\n        id\n        dayOfWeek\n        hour\n        clock {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.AssignClockToTemplateDocument,
    "\n  mutation RemoveClockFromTemplate($id: ID!) {\n    removeClockFromTemplate(id: $id) {\n      success\n      message\n    }\n  }\n": types.RemoveClockFromTemplateDocument,
    "\n  mutation CreateWeeklyOverride($input: CreateWeeklyOverrideInput!) {\n    createWeeklyOverride(input: $input) {\n      success\n      message\n      override {\n        id\n        weekCommencing\n        dayOfWeek\n        hour\n        reason\n        clock {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.CreateWeeklyOverrideDocument,
    "\n  mutation RemoveWeeklyOverride($id: ID!) {\n    removeWeeklyOverride(id: $id) {\n      success\n      message\n    }\n  }\n": types.RemoveWeeklyOverrideDocument,
    "\n  mutation UpdateEpisode($input: UpdateEpisodeInput!) {\n    updateEpisode(input: $input) {\n      episode {\n        id\n        name\n        description\n        duration {\n            formatted\n            raw\n        }\n        extraData\n        shortId\n        createdAt\n        updatedAt\n        url\n        featuredImage {\n            id\n            key\n            type\n            mimeType\n            fileSize {\n                label\n                raw\n            }\n            urls {\n                medium\n                square\n            }\n        }\n        show {\n            id\n            shortName\n        }\n        series {\n            id\n            shortName\n        }\n        presenters {\n            id\n            name\n        }\n        networks {\n            id\n            name\n            logoSvgIcon\n        }\n      }\n    }\n  }\n": types.UpdateEpisodeDocument,
    "\n  mutation UpdateMusicClock($input: UpdateMusicClockInput!) {\n    updateMusicClock(input: $input) {\n      success\n      message\n      clock {\n        id\n        name\n        description\n        color\n        targetRuntime\n        network {\n          id\n          name\n        }\n        items {\n          ... on TrackClockItem {\n            ...CommonClockItemFields\n            track {\n              id\n              title\n            }\n          }\n          ... on SubcategoryClockItem {\n            ...CommonClockItemFields\n            subcategory {\n              id\n              name\n              category {\n                id\n                name\n              }\n            }\n          }\n          ... on GenreClockItem {\n            ...CommonClockItemFields\n            genre {\n              id\n              name\n            }\n          }\n          ... on NoteClockItem {\n            ...CommonClockItemFields\n            label\n            content\n          }\n          ... on AdBreakClockItem {\n            ...CommonClockItemFields\n            scheduledStartTime\n          }\n          ... on CommandClockItem {\n            ...CommonClockItemFields\n            command\n          }\n        }\n      }\n    }\n  }\n\n  fragment CommonClockItemFields on ClockItemInterface {\n    id\n    clockId\n    createdAt\n    duration\n    orderIndex\n    updatedAt\n  }\n": types.UpdateMusicClockDocument,
    "\n  mutation UpdateNetwork($input: UpdateNetworkInput!) {\n    updateNetwork(input: $input) {\n      success\n      message\n      network {\n        id\n        name\n        code\n        baseUrl\n        imagesUrl\n        logoSvg\n        logoSvgCircular\n        logoSvgColor\n        logoSvgIcon\n        networkType\n        tagline\n        cssUrl\n        playFormat\n        playUrl\n        shortId\n      }\n    }\n  }\n": types.UpdateNetworkDocument,
    "\n  mutation UpdatePresenter($input: UpdatePresenterInput!) {\n    updatePresenter(input: $input) {\n      presenter {\n        id\n        name\n        bio\n        shortBio\n        hidden\n        hero\n        picture\n        networks {\n          id\n          name\n          logoSvgIcon\n        }\n      }\n    }\n  }\n": types.UpdatePresenterDocument,
    "\n  mutation UpdateScheduleItem($input: UpdateScheduleItemInput!) {\n    updateScheduleItem(input: $input) {\n      scheduleItem {\n        id\n        end\n        start\n        networks {\n          id\n          name\n        }\n        episode {\n          id\n          name\n          show {\n            shortName\n          }\n          description\n          broadcasts {\n            id\n            start\n            end\n          }\n          featuredImage {\n            urls {\n              square\n              customSquare(size: 150)\n            }\n          }\n          networks {\n            id\n            logoSvgIcon\n          }\n        }\n      }\n    }\n  }\n": types.UpdateScheduleItemDocument,
    "\n  mutation UpdateScheduleTemplate($input: UpdateDefaultScheduleInput!) {\n    updateDefaultSchedule(input: $input) {\n      defaultSchedule {\n        id\n        name\n        assignedTo\n        networks {\n          id\n          name\n          code\n        }\n      }\n    }\n  }\n": types.UpdateScheduleTemplateDocument,
    "\n  mutation UpdateSeries($input: UpdateSeriesInput!) {\n    updateSeries(input: $input) {\n      series {\n        id\n        fullName\n        shortName\n        fullDesc\n        shortDesc\n        archived\n        featuredImage {\n          id\n          key\n          type\n          mimeType\n          fileSize {\n            label\n            raw\n          }\n          urls {\n            medium\n            square\n          }\n        }\n        show {\n          id\n          shortName\n          fullName\n        }\n        network {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.UpdateSeriesDocument,
    "\n  mutation UpdateShow($input: UpdateShowInput!) {\n    updateShow(input: $input) {\n      show {\n        id\n        fullName\n        shortName\n        fullDesc\n        shortDesc\n        hidden\n        extraData\n        featuredImage {\n            id\n            key\n            type\n            mimeType\n            fileSize {\n                label\n                raw\n            }\n            urls {\n                medium\n                square\n            }\n        }\n        networks {\n          id\n          name\n          logoSvgIcon\n        }\n        presenters {\n          id\n          name\n        }\n        series {\n          items {\n            id\n            fullName\n          }\n        }\n        totalEpisodes\n        createdAt\n        updatedAt\n        url\n      }\n    }\n  }\n": types.UpdateShowDocument,
    "\n  mutation UpdateTemplateAssignment($input: UpdateMusicAssignmentInput!) {\n    updateMusicAssignment(input: $input) {\n      success\n      message\n      assignment {\n        id\n        isTemplate\n        clockId\n        dayOfWeek\n        hour\n        clock {\n          id\n          name\n          color\n          targetRuntime\n        }\n      }\n    }\n  }\n": types.UpdateTemplateAssignmentDocument,
    "\n  mutation UpdateTrack($input: UpdateTrackInput!) {\n    updateTrack(input: $input) {\n      success\n      message\n      track {\n        id\n        title\n        artist\n        album\n        year\n        genre {\n          id\n          name\n        }\n        subcategory {\n          id\n          name\n          category {\n            id\n            name\n          }\n        }\n        isrc\n        label\n        copyright\n        composer\n        publisher\n        image\n        metadata {\n          id\n          key\n          value\n        }\n        enabled\n        dateAdded\n        dateModified\n      }\n    }\n  }\n": types.UpdateTrackDocument,
    "\n  mutation UpdateTrackMetadata($input: UpdateTrackMetadataInput!) {\n    updateTrackMetadata(input: $input) {\n      success\n      message\n      track {\n        id\n        metadata {\n          id\n          key\n          value\n        }\n      }\n    }\n  }\n": types.UpdateTrackMetadataDocument,
    "\n  query GetCategories {\n    categories {\n      id\n      name\n      subcategories {\n        id\n        name\n        averageDuration {\n          raw\n          formatted\n        }\n      }\n    }\n  }\n": types.GetCategoriesDocument,
    "\n\tquery Debug {\n\t\tdebug {\n\t\t\tid\n\t\t\tstatus\n\t\t\trandomShow {\n\t\t\t\tid\n\t\t\t\tshortName\n\t\t\t\tepisodes {\n\t\t\t\t\ttotal\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n": types.DebugDocument,
    "\n    query SearchDefaultSchedule($filters: DefaultScheduleListInput!) {\n        defaultSchedules(\n            filters: $filters\n        ) {\n      total\n      items {\n        id\n        assignedTo\n        name\n        networks {\n            id\n            name\n            logoSvgIcon\n        }\n        items {\n          id\n          start\n          end\n          episodeName\n          media {\n            id\n            urls {\n              customSquare(size: 120)\n            }\n          }\n          show {\n            id\n            shortName\n            featuredImage {\n              urls {\n                customSquare(size: 120)\n              }\n            }\n          }\n        }\n      }\n    }\n}": types.SearchDefaultScheduleDocument,
    "\n  query GetDefaultSchedules($filters: DefaultScheduleListInput!) {\n    defaultSchedules(filters: $filters) {\n      total\n      items {\n        id\n        name\n        assignedTo\n        networks {\n          id\n          name\n          logoSvgIcon\n        }\n        items {\n          id\n          start\n          end\n          episodeName\n          media {\n            id\n            urls {\n              customSquare(size: 120)\n            }\n          }\n          show {\n            id\n            shortName\n            featuredImage {\n              urls {\n                customSquare(size: 120)\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetDefaultSchedulesDocument,
    "\n  query GetDefaultSchedule($id: ID!) {\n    defaultSchedule(id: $id) {\n      id\n      name\n      assignedTo\n      networks {\n        id\n        name\n        code\n      }\n      items {\n        id\n        start\n        end\n        endsNextDay\n        episodeName\n        episodeDesc\n        show {\n          id\n          fullName\n          shortName\n          featuredImage {\n            urls {\n              customSquare(size: 120)\n            }\n          }\n        }\n        series {\n          id\n          fullName\n          shortName\n        }\n        presenters {\n          id\n          name\n        }\n        media {\n          id\n          key\n          urls {\n            medium\n            original\n          }\n        }\n        networks {\n          id\n          name\n          code\n          logoSvgIcon\n        }\n        existingEpisode {\n          id\n          name\n          description\n        }\n        repeatOf {\n          id\n          episodeName\n        }\n      }\n    }\n  }\n": types.GetDefaultScheduleDocument,
    "\n  query SearchEpisodes($filters: EpisodeListInput) {\n    episodes(filters: $filters) {\n      items {\n        id\n        name\n        show {\n          id\n          shortName\n        }\n      }\n    }\n  }\n": types.SearchEpisodesDocument,
    "\n  query SearchEpisodesV2($filters: EpisodeListInputV2) {\n    episodesV2(filters: $filters) {\n      total\n      items {\n        id\n        shortId\n        name\n        description\n        createdAt\n        updatedAt\n        duration {\n          formatted\n          raw\n        }\n        featuredImage {\n          urls {\n            square\n          }\n        }\n        show {\n          id\n          shortName\n          shortId\n        }\n        presenters {\n          id\n          name\n        }\n        networks {\n          id\n          name\n          logoSvgIcon\n        }\n        series {\n          id\n          shortName\n        }\n        broadcasts {\n          id\n          start\n          end\n        }\n      }\n    }\n  }\n": types.SearchEpisodesV2Document,
    "\n  query GetEpisode($id: ID!) {\n    episode(id: $id) {\n      id\n      name\n      description\n      duration {\n        formatted\n        raw\n      }\n      extraData\n      shortId\n      createdAt\n      updatedAt\n      url\n      featuredImage {\n        id\n        key\n        type\n        mimeType\n        fileSize {\n          label\n          raw\n        }\n        urls {\n          medium\n          square\n        }\n      }\n      show {\n        id\n        shortName\n      }\n      series {\n        id\n        shortName\n      }\n      presenters {\n        id\n        name\n      }\n      networks {\n        id\n        name\n        logoSvgIcon\n      }\n    }\n  }\n": types.GetEpisodeDocument,
    "\n  query GetEpisodeDetails($id: ID!) {\n    episode(id: $id) {\n    \tid\n      name\n      show {\n        id\n        shortName\n      }\n      description\n      broadcasts {\n        id\n      }\n      featuredImage {\n        urls {\n          square\n          customSquare(size: 150)\n        }\n      }\n      networks {\n        id\n        logoSvgIcon\n      }\n    }\n  }\n": types.GetEpisodeDetailsDocument,
    "\n  query GetGenres($filters: GenreListInputV2) {\n      genresV2(filters: $filters) {\n        items {\n          id\n          name\n        }\n      }\n  }\n": types.GetGenresDocument,
    "\n  query GetJobs($limit: Int, $status: JobStatus, $type: JobType) {\n    jobs(limit: $limit, status: $status, type: $type) {\n      id\n      type\n      status\n      sourceUrl\n      searchQuery\n      progress\n      errorMessage\n      songId\n      createdAt\n      updatedAt\n      completedAt\n    }\n  }\n": types.GetJobsDocument,
    "\n  query GetJob($id: ID!) {\n    job(id: $id) {\n      id\n      type\n      status\n      sourceUrl\n      searchQuery\n      progress\n      errorMessage\n      songId\n      createdAt\n      updatedAt\n      completedAt\n    }\n  }\n": types.GetJobDocument,
    "\n  query GetMedia($id: ID!) {\n    media(id: $id) {\n      id\n      key\n      type\n      mimeType\n      fileSize {\n        label\n        raw\n      }\n      urls {\n        medium\n        square\n      }\n    }\n  }\n": types.GetMediaDocument,
    "\n  query SearchMedia($filters: MediaListInput) {\n    mediaList(filters: $filters) {\n      total\n      items {\n        id\n        key\n        type\n        mimeType\n        fileSize {\n          label\n          raw\n        }\n        urls {\n          medium\n          square\n        }\n      }\n    }\n  }\n": types.SearchMediaDocument,
    "\n  query GetMusicClockAssignments($networkId: ID!, $filters: MusicAssignmentFilters) {\n    musicClockAssignments(networkId: $networkId, filters: $filters) {\n      id\n      clock {\n        id\n        name\n        targetRuntime\n      }\n      dayOfWeek\n      hour\n      startDate\n      endDate\n      priority\n      isTemplate\n      network {\n        id\n        name\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": types.GetMusicClockAssignmentsDocument,
    "\n  query GetMusicPlaylists($networkId: ID!, $filters: MusicPlaylistFilters!) {\n    musicPlaylists(networkId: $networkId, filters: $filters) {\n      id\n      shortId\n      scheduledDate\n      scheduledHour\n      status\n      totalDuration\n      estimatedDuration\n      isLocked\n      notes\n      clock {\n        id\n        name\n      }\n      items {\n        id\n        orderIndex\n        itemType\n        track {\n          id\n          title\n          artist\n          duration {\n            formatted\n          }\n        }\n        scheduledStart\n        scheduledEnd\n        actualDuration\n        isManualEdit\n        notes\n      }\n      ruleViolations {\n        id\n        rule {\n          id\n          name\n          ruleType\n        }\n        severity\n        description\n        suggestedFix\n        autoFixAvailable\n      }\n      network {\n        id\n        name\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": types.GetMusicPlaylistsDocument,
    "\n  query GetMusicClocks($networkId: ID!, $filters: MusicClockFilters) {\n    musicClocks(networkId: $networkId, filters: $filters) {\n      id\n      name\n      description\n      color\n      targetRuntime\n      network {\n        id\n        name\n        logoSvgIcon\n      }\n      createdAt\n      updatedAt\n      items {\n        ... on TrackClockItem {\n          ...CommonClockItemFields\n          track {\n            id\n            title\n          }\n        }\n        ... on SubcategoryClockItem {\n          ...CommonClockItemFields\n          subcategory {\n            id\n            name\n            category {\n              id\n              name\n            }\n          }\n        }\n        ... on GenreClockItem {\n          ...CommonClockItemFields\n          genre {\n            id\n            name\n          }\n        }\n        ... on NoteClockItem {\n          ...CommonClockItemFields\n          label\n          content\n        }\n        ... on AdBreakClockItem {\n          ...CommonClockItemFields\n          scheduledStartTime\n        }\n        ... on CommandClockItem {\n          ...CommonClockItemFields\n          command\n        }\n      }\n    }\n  }\n\n  fragment CommonClockItemFields on ClockItemInterface {\n    id\n    clockId\n    createdAt\n    duration\n    orderIndex\n    updatedAt\n  }\n": types.GetMusicClocksDocument,
    "\n  query GetMusicClock($id: ID!) {\n    musicClock(id: $id) {\n      id\n      name\n      description\n      color\n      targetRuntime\n      network {\n        id\n        name\n      }\n      createdAt\n      updatedAt\n      items {\n        ...on TrackClockItem {\n          ...CommonClockItemFields,\n          track {\n            id\n            title\n          }\n        }\n        ... on SubcategoryClockItem {\n          ...CommonClockItemFields,\n          subcategory {\n            id\n            name\n            category {\n              id\n              name\n            }\n          }\n        }\n        ... on GenreClockItem {\n          ...CommonClockItemFields,\n          genre {\n            id\n            name\n          }\n        }\n        ... on NoteClockItem {\n          ...CommonClockItemFields\n          label\n          content\n        }\n        ... on AdBreakClockItem {\n          ...CommonClockItemFields\n          scheduledStartTime\n        }\n        ... on CommandClockItem {\n          ...CommonClockItemFields\n          command\n        }\n      }\n    }\n  }\n\nfragment CommonClockItemFields on ClockItemInterface {\n\tid\n\tclockId\n\tcreatedAt\n\tduration\n\torderIndex\n\tupdatedAt\n}\n": types.GetMusicClockDocument,
    "\n  query GetMusicRules($networkId: ID, $filters: MusicRuleFilters) {\n    musicRules(networkId: $networkId, filters: $filters) {\n      id\n      name\n      description\n      ruleType\n      breakable\n      value\n      unit\n      criteria {\n        categories\n        genres\n        artists\n        tags\n        timeWindows {\n          startHour\n          endHour\n          daysOfWeek\n        }\n      }\n      priority\n      isActive\n      network {\n        id\n        name\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": types.GetMusicRulesDocument,
    "\n  query GetMusicRule($id: ID!) {\n    musicRule(id: $id) {\n      id\n      name\n      description\n      ruleType\n      breakable\n      value\n      unit\n      criteria {\n        categories\n        genres\n        artists\n        tags\n        timeWindows {\n          startHour\n          endHour\n          daysOfWeek\n        }\n      }\n      priority\n      isActive\n      network {\n        id\n        name\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": types.GetMusicRuleDocument,
    "\n  query MusicSchedules($networkId: ID!, $startDate: Date!, $endDate: Date!) {\n    musicSchedules(networkId: $networkId, startDate: $startDate, endDate: $endDate) {\n      id\n      networkId\n      scheduledDate\n      hour\n      clockId\n      playlistName\n      exportedToRadioDj\n      ruleViolations {\n        ruleId\n        ruleName\n        ruleType\n        severity\n        description\n        conflictTrackId\n        conflictTime\n      }\n      items {\n        id\n        orderIndex\n        itemType\n        trackId\n        track {\n          id\n          title\n          artist\n          duration {\n            formatted\n          }\n        }\n        noteContent\n        duration\n        startTime\n        ruleViolations {\n          ruleId\n          ruleName\n          ruleType\n          severity\n          description\n          conflictTrackId\n          conflictTime\n        }\n      }\n      clock {\n        id\n        name\n        color\n        targetRuntime\n      }\n    }\n  }\n": types.MusicSchedulesDocument,
    "\n  query WeeklyOverrides($networkId: ID!, $templateId: ID!, $weekCommencing: String!) {\n    musicClockWeeklyOverrides(networkId: $networkId, templateId: $templateId, weekCommencing: $weekCommencing) {\n      id\n      networkId\n      templateId\n      clockId\n      weekCommencing\n      dayOfWeek\n      hour\n      reason\n      clock {\n        id\n        name\n        color\n        targetRuntime\n      }\n    }\n  }\n": types.WeeklyOverridesDocument,
    "\n\tquery GetNetworks {\n\t\tnetworks {\n\t\t\tid\n\t\t\tname\n\t\t\tcode\n\t\t\tbaseUrl\n\t\t\timagesUrl\n\t\t\tlogoSvg\n\t\t\tlogoSvgCircular\n\t\t\tlogoSvgColor\n\t\t\tlogoSvgIcon\n\t\t\tnetworkType\n\t\t\ttagline\n\t\t\tcssUrl\n\t\t\tplayFormat\n\t\t\tplayUrl\n\t\t\tshortId\n\t\t}\n\t}\n": types.GetNetworksDocument,
    "\n\tquery GetNetwork($id: ID!) {\n\t\tnetwork(id: $id) {\n\t\t\tid\n\t\t\tname\n\t\t\tcode\n\t\t\tbaseUrl\n\t\t\timagesUrl\n\t\t\tlogoSvg\n\t\t\tlogoSvgCircular\n\t\t\tlogoSvgColor\n\t\t\tlogoSvgIcon\n\t\t\tnetworkType\n\t\t\ttagline\n\t\t\tcssUrl\n\t\t\tplayFormat\n\t\t\tplayUrl\n\t\t\tshortId\n\t\t}\n\t}\n": types.GetNetworkDocument,
    "\n\tquery GetPresenters($filters: PresenterListInputV2) {\n\t\tpresentersV2(filters: $filters) {\n\t\t\ttotal\n            items {\n                id\n                name\n                picture\n                hidden\n                networks {\n                    id\n                    name\n                    logoSvgIcon\n                }\n            }\n\t\t}\n\t}\n": types.GetPresentersDocument,
    "\n\tquery GetPresenter($id: ID!) {\n\t\tpresenter(id: $id) {\n            id\n            name\n            bio\n            hero\n            hidden\n            shortBio\n            picture\n            shows {\n                total\n                \n            }\n            episodes {\n                total    \n            }\n            networks {\n                id\n            }\n\t\t}\n\t}\n": types.GetPresenterDocument,
    "\n    query Schedule(\n\t$from: DateTime!\n\t$network: ID!\n\t$to: DateTime\n) {\n\tschedule(\n\t\tfilters: { from: $from, networkId: $network, to: $to, amount: 200 }\n\t) {\n\t\ttotal\n\t\titems {\n\t\t\tid\n\t\t\tstart\n\t\t\tend\n\t\t\tnetworks {\n\t\t\t\tid\n                name\n                logoSvgIcon\n\t\t\t}\n\t\t\tepisode {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\tshow {\n\t\t\t\t\tid\n\t\t\t\t\tshortName\n\t\t\t\t}\n\t\t\t\tdescription\n\t\t\t\tbroadcasts {\n\t\t\t\t\tid\n\t\t\t\t}\n\t\t\t\tfeaturedImage {\n\t\t\t\t\turls {\n\t\t\t\t\t\tsquare\n\t\t\t\t\t\tcustomSquare(size: 150)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnetworks {\n\t\t\t\t\tid\n\t\t\t\t\tlogoSvgIcon\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n": types.ScheduleDocument,
    "\n  query SearchSeries($filters: SeriesListInputV2) {\n    seriesListV2(filters: $filters) {\n      total\n      items {\n        id\n        shortName\n        fullName\n        archived\n        show {\n          id\n          shortName\n        }\n        network {\n          id\n          name\n          logoSvgIcon\n        }\n      }\n    }\n  }\n": types.SearchSeriesDocument,
    "\n  query GetSeries($id: ID!) {\n    series(id: $id) {\n      id\n      shortName\n      fullName\n      shortDesc\n      fullDesc\n      archived\n      show {\n        id\n        shortName\n        fullName\n      }\n      network {\n        id\n        name\n      }\n      featuredImage {\n        id\n        key\n        urls {\n          medium\n          square\n        }\n      }\n    }\n  }\n": types.GetSeriesDocument,
    "\n  query SearchShows($filters: ShowListInputV2) {\n    showsV2(filters: $filters) {\n      total\n      items {\n        id\n        shortId\n        shortName\n        fullName\n        featuredImage {\n          urls {\n            square\n          }\n        }\n        presenters {\n            id\n            name\n        }\n        networks {\n            id\n            name\n            logoSvgIcon\n        }\n        hidden\n      }\n    }\n  }\n": types.SearchShowsDocument,
    "\n  query GetShow($id: ID!) {\n    show(id: $id) {\n      createdAt\n      extraData\n      featuredImage {\n          id\n          key\n          type\n          mimeType\n          fileSize {\n              label\n              raw\n          }\n          urls {\n              medium\n              square\n          }\n      }\n      fullDesc\n      fullName\n      hidden\n      id\n      networks {\n        id\n        name\n        logoSvgIcon\n      }\n      presenters {\n        id\n        name\n      }\n      series {\n        items {\n          id\n          fullName\n        }\n      }\n      shortDesc\n      shortId\n      shortName\n      totalEpisodes\n      updatedAt\n      url\n    }\n  }\n": types.GetShowDocument,
    "\n  query SearchTracks($filters: TrackListInput) {\n    tracks(filters: $filters) {\n      items {\n        id\n        artist\n        title\n        album\n        duration {\n          formatted\n          raw\n        }\n        path\n        enabled\n        year\n        genre {\n          name\n        }\n        isrc\n        bpm\n        dateAdded\n        dateModified\n      }\n      total\n    }\n  }\n": types.SearchTracksDocument,
    "\n  query SearchTracksV2($filters: TrackListInputV2) {\n    tracksV2(filters: $filters) {\n      items {\n        id\n        artist\n        title\n        album\n        duration {\n          formatted\n          raw\n        }\n        path\n        enabled\n        year\n        genre {\n          id\n          name\n        }\n        subcategory {\n          id\n          name\n          category {\n            id\n            name\n          }\n        }\n        metadata {\n          id\n        }\n        isrc\n        bpm\n        dateAdded\n        dateModified\n      }\n      total\n    }\n  }\n": types.SearchTracksV2Document,
    "\n  query GetTrack($id: ID!) {\n    track(id: $id) {\n      id\n      artist\n      title\n      album\n      duration {\n        formatted\n        raw\n      }\n      path\n      enabled\n      year\n      genre {\n        id\n        name\n      }\n      subcategory {\n        id\n        name\n        category {\n          id\n          name\n        }\n      }\n      isrc\n      bpm\n      dateAdded\n      dateModified\n      label\n      copyright\n      composer\n      publisher\n      image\n      metadata {\n        id\n        key\n        value\n      }\n    }\n  }\n": types.GetTrackDocument,
    "\n  mutation SearchYouTube($query: String!) {\n    searchYouTube(query: $query) {\n      url\n      title\n      artist\n      duration\n      thumbnail\n      description\n    }\n  }\n": types.SearchYouTubeDocument,
    "\n  mutation BulkSearchYouTube($input: BulkSearchYouTubeInput!) {\n    bulkSearchYouTube(input: $input) {\n      success\n      message\n      results {\n        query\n        results {\n          url\n          title\n          artist\n          duration\n          thumbnail\n          description\n        }\n        error\n      }\n      totalQueries\n      successfulQueries\n      failedQueries\n    }\n  }\n": types.BulkSearchYouTubeDocument,
    "\n  query SearchMusicBrainz($input: MusicBrainzSearchInput!) {\n    searchMusicBrainz(input: $input) {\n      # Core recording identification\n      id\n      recordingId\n\n      # Core metadata (with Picard scoring weights)\n      title\n      artist\n      artistId\n      artistSortOrder\n\n      # Full artist credits array\n      artists {\n        id\n        name\n        sortName\n        joinPhrase\n      }\n\n      # Track metadata\n      length\n\n      # Industry identifiers\n      isrc\n\n      # Enhanced scoring\n      score\n\n      # Nested releases for this recording\n      releases {\n        # Core release identification\n        id\n        releaseId\n        releaseGroupId\n\n        # Core metadata\n        album\n\n        # Track information within this release\n        trackNumber\n        totalTracks\n        discNumber\n        totalDiscs\n\n        # Release information\n        date\n        originalDate\n        year\n        country\n\n        # Release categorization\n        releaseType\n        releaseStatus\n\n        # Industry identifiers\n        barcode\n\n        # Additional metadata\n        albumArtistSortOrder\n        media\n        label # Resolved via field resolver using DataLoader\n\n        # MusicBrainz IDs for linking\n        releaseArtistId\n        trackId\n\n        # Enhanced scoring for this specific release\n        score\n      }\n\n      # Dynamic metadata fields\n      dynamicFields {\n        key\n        value\n      }\n    }\n  }\n": types.SearchMusicBrainzDocument,
    "\n  mutation BulkSearchMusicBrainz($input: BulkSearchMusicBrainzInput!) {\n    bulkSearchMusicBrainz(input: $input) {\n      success\n      message\n      results {\n        id\n        query {\n          artist\n          title\n          album\n        }\n        results {\n          id\n          title\n          artist\n          score\n        }\n        error\n      }\n      totalSearches\n      successfulSearches\n      failedSearches\n    }\n  }\n": types.BulkSearchMusicBrainzDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation ApplyAssignedDefaultSchedule(\n    $networkId: ID!\n    $date: DateTime!\n    $assignedTo: [DayOfWeek!]!\n  ) {\n    applyAssignedDefaultSchedule(\n      input: { networkId: $networkId, date: $date, assignedTo: $assignedTo }\n    ) {\n      success\n      message\n    }\n  }\n"): (typeof documents)["\n  mutation ApplyAssignedDefaultSchedule(\n    $networkId: ID!\n    $date: DateTime!\n    $assignedTo: [DayOfWeek!]!\n  ) {\n    applyAssignedDefaultSchedule(\n      input: { networkId: $networkId, date: $date, assignedTo: $assignedTo }\n    ) {\n      success\n      message\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation ApplyDefaultSchedule($defaultScheduleId: ID!, $date: DateTime!) {\n    applyDefaultSchedule(\n      input: { defaultSchedule: $defaultScheduleId, date: $date }\n    ) {\n      success\n      message\n    }\n  }\n"): (typeof documents)["\n  mutation ApplyDefaultSchedule($defaultScheduleId: ID!, $date: DateTime!) {\n    applyDefaultSchedule(\n      input: { defaultSchedule: $defaultScheduleId, date: $date }\n    ) {\n      success\n      message\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation AssignDefaultScheduleToNetwork($input: AssignDefaultScheduleToNetworkInput!) {\n    assignDefaultScheduleToNetwork(input: $input) {\n      success\n      message\n    }\n  }\n"): (typeof documents)["\n  mutation AssignDefaultScheduleToNetwork($input: AssignDefaultScheduleToNetworkInput!) {\n    assignDefaultScheduleToNetwork(input: $input) {\n      success\n      message\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation AssignMusicClock($input: AssignMusicClockInput!) {\n    assignMusicClock(input: $input) {\n      assignment {\n        id\n        clock {\n          id\n          name\n          targetRuntime\n        }\n        dayOfWeek\n        hour\n        priority\n        isTemplate\n        network {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AssignMusicClock($input: AssignMusicClockInput!) {\n    assignMusicClock(input: $input) {\n      assignment {\n        id\n        clock {\n          id\n          name\n          targetRuntime\n        }\n        dayOfWeek\n        hour\n        priority\n        isTemplate\n        network {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation StartMusicSchedulingJob($input: StartMusicSchedulingJobInput!) {\n    startMusicSchedulingJob(input: $input) {\n      job {\n        id\n        status\n        type\n        progress\n        createdAt\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation StartMusicSchedulingJob($input: StartMusicSchedulingJobInput!) {\n    startMusicSchedulingJob(input: $input) {\n      job {\n        id\n        status\n        type\n        progress\n        createdAt\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation BulkDeleteDefaultScheduleItems($input: BulkDeleteDefaultScheduleItemsInput!) {\n    bulkDeleteDefaultScheduleItems(input: $input) {\n      success\n      successCount\n      failureCount\n      totalItems\n      deletedIds\n      failedItems {\n        id\n        error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation BulkDeleteDefaultScheduleItems($input: BulkDeleteDefaultScheduleItemsInput!) {\n    bulkDeleteDefaultScheduleItems(input: $input) {\n      success\n      successCount\n      failureCount\n      totalItems\n      deletedIds\n      failedItems {\n        id\n        error\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation BulkUpsertDefaultScheduleItems($input: BulkUpsertDefaultScheduleItemsInput!) {\n    bulkUpsertDefaultScheduleItems(input: $input) {\n      success\n      successCount\n      failureCount\n      totalItems\n      upsertedItems {\n        id\n        start\n        end\n        endsNextDay\n        episodeName\n        episodeDesc\n        show {\n          id\n          shortName\n        }\n        series {\n          id\n          shortName\n        }\n        presenters {\n          id\n          name\n        }\n        networks {\n          id\n          name\n        }\n        existingEpisode {\n          id\n          name\n        }\n        repeatOf {\n          id\n        }\n      }\n      failedItems {\n        id\n        error\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation BulkUpsertDefaultScheduleItems($input: BulkUpsertDefaultScheduleItemsInput!) {\n    bulkUpsertDefaultScheduleItems(input: $input) {\n      success\n      successCount\n      failureCount\n      totalItems\n      upsertedItems {\n        id\n        start\n        end\n        endsNextDay\n        episodeName\n        episodeDesc\n        show {\n          id\n          shortName\n        }\n        series {\n          id\n          shortName\n        }\n        presenters {\n          id\n          name\n        }\n        networks {\n          id\n          name\n        }\n        existingEpisode {\n          id\n          name\n        }\n        repeatOf {\n          id\n        }\n      }\n      failedItems {\n        id\n        error\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateEpisode($input: CreateEpisodeInput!) {\n    createEpisode(input: $input) {\n      episode {\n        id\n        name\n        description\n        duration {\n          formatted\n          raw\n        }\n        extraData\n        shortId\n        createdAt\n        updatedAt\n        url\n        featuredImage {\n          id\n          key\n          urls {\n            medium\n            square\n          }\n        }\n        show {\n          id\n          shortName\n          fullName\n        }\n        series {\n          id\n          fullName\n        }\n        presenters {\n          id\n          name\n        }\n        networks {\n          id\n          name\n          logoSvgIcon\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateEpisode($input: CreateEpisodeInput!) {\n    createEpisode(input: $input) {\n      episode {\n        id\n        name\n        description\n        duration {\n          formatted\n          raw\n        }\n        extraData\n        shortId\n        createdAt\n        updatedAt\n        url\n        featuredImage {\n          id\n          key\n          urls {\n            medium\n            square\n          }\n        }\n        show {\n          id\n          shortName\n          fullName\n        }\n        series {\n          id\n          fullName\n        }\n        presenters {\n          id\n          name\n        }\n        networks {\n          id\n          name\n          logoSvgIcon\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateGenre($input: CreateGenreInput!) {\n    createGenre(input: $input) {\n      success\n      message\n      genre {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateGenre($input: CreateGenreInput!) {\n    createGenre(input: $input) {\n      success\n      message\n      genre {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateMusicClock($input: CreateMusicClockInput!) {\n    createMusicClock(input: $input) {\n      success\n      message\n      clock {\n        id\n        name\n        description\n        color\n        targetRuntime\n        network {\n          id\n          name\n        }\n        items {\n          ... on TrackClockItem {\n            ...CommonClockItemFields\n            track {\n              id\n              title\n            }\n          }\n          ... on SubcategoryClockItem {\n            ...CommonClockItemFields\n            subcategory {\n              id\n              name\n              category {\n                id\n                name\n              }\n            }\n          }\n          ... on GenreClockItem {\n            ...CommonClockItemFields\n            genre {\n              id\n              name\n            }\n          }\n          ... on NoteClockItem {\n            ...CommonClockItemFields\n            label\n            content\n          }\n          ... on AdBreakClockItem {\n            ...CommonClockItemFields\n            scheduledStartTime\n          }\n          ... on CommandClockItem {\n            ...CommonClockItemFields\n            command\n          }\n        }\n      }\n    }\n  }\n\n  fragment CommonClockItemFields on ClockItemInterface {\n    id\n    clockId\n    createdAt\n    duration\n    orderIndex\n    updatedAt\n  }\n"): (typeof documents)["\n  mutation CreateMusicClock($input: CreateMusicClockInput!) {\n    createMusicClock(input: $input) {\n      success\n      message\n      clock {\n        id\n        name\n        description\n        color\n        targetRuntime\n        network {\n          id\n          name\n        }\n        items {\n          ... on TrackClockItem {\n            ...CommonClockItemFields\n            track {\n              id\n              title\n            }\n          }\n          ... on SubcategoryClockItem {\n            ...CommonClockItemFields\n            subcategory {\n              id\n              name\n              category {\n                id\n                name\n              }\n            }\n          }\n          ... on GenreClockItem {\n            ...CommonClockItemFields\n            genre {\n              id\n              name\n            }\n          }\n          ... on NoteClockItem {\n            ...CommonClockItemFields\n            label\n            content\n          }\n          ... on AdBreakClockItem {\n            ...CommonClockItemFields\n            scheduledStartTime\n          }\n          ... on CommandClockItem {\n            ...CommonClockItemFields\n            command\n          }\n        }\n      }\n    }\n  }\n\n  fragment CommonClockItemFields on ClockItemInterface {\n    id\n    clockId\n    createdAt\n    duration\n    orderIndex\n    updatedAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateMusicRule($input: CreateMusicRuleInput!) {\n    createMusicRule(input: $input) {\n      success\n      message\n      rule {\n        id\n        name\n        description\n        ruleType\n        breakable\n        value\n        unit\n        criteria {\n          categories\n          genres\n          artists\n          tags\n          timeWindows {\n            startHour\n            endHour\n            daysOfWeek\n          }\n        }\n        priority\n        isActive\n        network {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateMusicRule($input: CreateMusicRuleInput!) {\n    createMusicRule(input: $input) {\n      success\n      message\n      rule {\n        id\n        name\n        description\n        ruleType\n        breakable\n        value\n        unit\n        criteria {\n          categories\n          genres\n          artists\n          tags\n          timeWindows {\n            startHour\n            endHour\n            daysOfWeek\n          }\n        }\n        priority\n        isActive\n        network {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateNetwork($input: CreateNetworkInput!) {\n    createNetwork(input: $input) {\n      success\n      message\n      network {\n        id\n        name\n        code\n        baseUrl\n        imagesUrl\n        logoSvg\n        logoSvgCircular\n        logoSvgColor\n        logoSvgIcon\n        networkType\n        tagline\n        cssUrl\n        playFormat\n        playUrl\n        shortId\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateNetwork($input: CreateNetworkInput!) {\n    createNetwork(input: $input) {\n      success\n      message\n      network {\n        id\n        name\n        code\n        baseUrl\n        imagesUrl\n        logoSvg\n        logoSvgCircular\n        logoSvgColor\n        logoSvgIcon\n        networkType\n        tagline\n        cssUrl\n        playFormat\n        playUrl\n        shortId\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreatePresenter($input: CreatePresenterInput!) {\n    createPresenter(input: $input) {\n      presenter {\n        id\n        name\n        bio\n        shortBio\n        hidden\n        hero\n        picture\n        networks {\n          id\n          name\n          logoSvgIcon\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreatePresenter($input: CreatePresenterInput!) {\n    createPresenter(input: $input) {\n      presenter {\n        id\n        name\n        bio\n        shortBio\n        hidden\n        hero\n        picture\n        networks {\n          id\n          name\n          logoSvgIcon\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateScheduleItem($input: CreateScheduleItemInput!) {\n    createScheduleItem(input: $input) {\n      scheduleItem {\n        id\n        end\n        start\n        networks {\n          id\n          name\n        }\n        episode {\n          id\n          name\n          show {\n            shortName\n          }\n          description\n          broadcasts {\n            id\n            start\n            end\n          }\n          featuredImage {\n            urls {\n              square\n              customSquare(size: 150)\n            }\n          }\n          networks {\n            id\n            logoSvgIcon\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateScheduleItem($input: CreateScheduleItemInput!) {\n    createScheduleItem(input: $input) {\n      scheduleItem {\n        id\n        end\n        start\n        networks {\n          id\n          name\n        }\n        episode {\n          id\n          name\n          show {\n            shortName\n          }\n          description\n          broadcasts {\n            id\n            start\n            end\n          }\n          featuredImage {\n            urls {\n              square\n              customSquare(size: 150)\n            }\n          }\n          networks {\n            id\n            logoSvgIcon\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateScheduleTemplate($input: CreateDefaultScheduleInput!) {\n    createDefaultSchedule(input: $input) {\n      defaultSchedule {\n        id\n        name\n        assignedTo\n        networks {\n          id\n          name\n          code\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateScheduleTemplate($input: CreateDefaultScheduleInput!) {\n    createDefaultSchedule(input: $input) {\n      defaultSchedule {\n        id\n        name\n        assignedTo\n        networks {\n          id\n          name\n          code\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateSeries($input: CreateSeriesInput!) {\n    createSeries(input: $input) {\n      series {\n        id\n        fullName\n        shortName\n        fullDesc\n        shortDesc\n        archived\n        featuredImage {\n          id\n          key\n          type\n          mimeType\n          fileSize {\n            label\n            raw\n          }\n          urls {\n            medium\n            square\n          }\n        }\n        show {\n          id\n          shortName\n          fullName\n        }\n        network {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateSeries($input: CreateSeriesInput!) {\n    createSeries(input: $input) {\n      series {\n        id\n        fullName\n        shortName\n        fullDesc\n        shortDesc\n        archived\n        featuredImage {\n          id\n          key\n          type\n          mimeType\n          fileSize {\n            label\n            raw\n          }\n          urls {\n            medium\n            square\n          }\n        }\n        show {\n          id\n          shortName\n          fullName\n        }\n        network {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateShow($input: CreateShowInput!) {\n    createShow(input: $input) {\n      show {\n        id\n        fullName\n        shortName\n        fullDesc\n        shortDesc\n        hidden\n        extraData\n        featuredImage {\n          id\n          key\n          urls {\n            medium\n            square\n          }\n        }\n        networks {\n          id\n          name\n          logoSvgIcon\n        }\n        presenters {\n          id\n          name\n        }\n        series {\n          items {\n            id\n            fullName\n          }\n        }\n        totalEpisodes\n        createdAt\n        updatedAt\n        url\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateShow($input: CreateShowInput!) {\n    createShow(input: $input) {\n      show {\n        id\n        fullName\n        shortName\n        fullDesc\n        shortDesc\n        hidden\n        extraData\n        featuredImage {\n          id\n          key\n          urls {\n            medium\n            square\n          }\n        }\n        networks {\n          id\n          name\n          logoSvgIcon\n        }\n        presenters {\n          id\n          name\n        }\n        series {\n          items {\n            id\n            fullName\n          }\n        }\n        totalEpisodes\n        createdAt\n        updatedAt\n        url\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteWeeklyOverride($id: ID!) {\n    removeWeeklyOverride(id: $id) {\n      success\n      message\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteWeeklyOverride($id: ID!) {\n    removeWeeklyOverride(id: $id) {\n      success\n      message\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteEpisode($input: DeleteEpisodeInput!) {\n    deleteEpisode(input: $input) {\n      success\n      message\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteEpisode($input: DeleteEpisodeInput!) {\n    deleteEpisode(input: $input) {\n      success\n      message\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteMedia($input: DeleteMediaInput!) {\n    deleteMedia(input: $input) {\n      success\n      message\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteMedia($input: DeleteMediaInput!) {\n    deleteMedia(input: $input) {\n      success\n      message\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeletePresenter($input: DeletePresenterInput!) {\n    deletePresenter(input: $input) {\n      success\n      message\n    }\n  }\n"): (typeof documents)["\n  mutation DeletePresenter($input: DeletePresenterInput!) {\n    deletePresenter(input: $input) {\n      success\n      message\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteScheduleItem($input: DeleteScheduleItemInput!) {\n    deleteScheduleItem(input: $input) {\n        success\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteScheduleItem($input: DeleteScheduleItemInput!) {\n    deleteScheduleItem(input: $input) {\n        success\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteScheduleTemplate($input: DeleteDefaultScheduleInput!) {\n    deleteDefaultSchedule(input: $input) {\n      success\n      message\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteScheduleTemplate($input: DeleteDefaultScheduleInput!) {\n    deleteDefaultSchedule(input: $input) {\n      success\n      message\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteSeries($input: DeleteSeriesInput!) {\n    deleteSeries(input: $input) {\n      success\n      message\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteSeries($input: DeleteSeriesInput!) {\n    deleteSeries(input: $input) {\n      success\n      message\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteShow($input: DeleteShowInput!) {\n    deleteShow(input: $input) {\n      success\n      message\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteShow($input: DeleteShowInput!) {\n    deleteShow(input: $input) {\n      success\n      message\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteTrack($input: DeleteTrackInput!) {\n    deleteTrack(input: $input) {\n      success\n      message\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteTrack($input: DeleteTrackInput!) {\n    deleteTrack(input: $input) {\n      success\n      message\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateDownloadJob($input: DownloadJobInput!) {\n    createDownloadJob(input: $input) {\n      id\n      status\n      sourceUrl\n      searchQuery\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateDownloadJob($input: DownloadJobInput!) {\n    createDownloadJob(input: $input) {\n      id\n      status\n      sourceUrl\n      searchQuery\n      createdAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateBulkDownloadJobs($input: BulkDownloadJobsInput!) {\n    createBulkDownloadJobs(input: $input) {\n      success\n      message\n      results {\n        id\n        url\n        jobId\n        success\n        error\n      }\n      totalJobs\n      successfulJobs\n      failedJobs\n    }\n  }\n"): (typeof documents)["\n  mutation CreateBulkDownloadJobs($input: BulkDownloadJobsInput!) {\n    createBulkDownloadJobs(input: $input) {\n      success\n      message\n      results {\n        id\n        url\n        jobId\n        success\n        error\n      }\n      totalJobs\n      successfulJobs\n      failedJobs\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CancelJob($id: ID!) {\n    cancelJob(id: $id)\n  }\n"): (typeof documents)["\n  mutation CancelJob($id: ID!) {\n    cancelJob(id: $id)\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DuplicateScheduleTemplate($input: DuplicateDefaultScheduleInput!) {\n    duplicateDefaultSchedule(input: $input) {\n      defaultSchedule {\n        id\n        name\n        assignedTo\n        networks {\n          id\n          name\n          code\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation DuplicateScheduleTemplate($input: DuplicateDefaultScheduleInput!) {\n    duplicateDefaultSchedule(input: $input) {\n      defaultSchedule {\n        id\n        name\n        assignedTo\n        networks {\n          id\n          name\n          code\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateEnrichmentJob($input: EnrichmentJobInput!) {\n    createEnrichmentJob(input: $input) {\n      id\n      status\n      progress\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateEnrichmentJob($input: EnrichmentJobInput!) {\n    createEnrichmentJob(input: $input) {\n      id\n      status\n      progress\n      createdAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation EnrichPendingJob($input: EnrichPendingJobInput!) {\n    enrichPendingJob(input: $input) {\n      id\n      status\n      progress\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation EnrichPendingJob($input: EnrichPendingJobInput!) {\n    enrichPendingJob(input: $input) {\n      id\n      status\n      progress\n      updatedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation RetryJob($id: ID!) {\n    retryJob(id: $id) {\n      id\n      status\n      progress\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation RetryJob($id: ID!) {\n    retryJob(id: $id) {\n      id\n      status\n      progress\n      updatedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateMusicClockTemplate($input: CreateMusicClockTemplateInput!) {\n    createMusicClockTemplate(input: $input) {\n      success\n      message\n      template {\n        id\n        name\n        description\n        isDefault\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateMusicClockTemplate($input: CreateMusicClockTemplateInput!) {\n    createMusicClockTemplate(input: $input) {\n      success\n      message\n      template {\n        id\n        name\n        description\n        isDefault\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateMusicClockTemplate($input: UpdateMusicClockTemplateInput!) {\n    updateMusicClockTemplate(input: $input) {\n      success\n      message\n      template {\n        id\n        name\n        description\n        isDefault\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateMusicClockTemplate($input: UpdateMusicClockTemplateInput!) {\n    updateMusicClockTemplate(input: $input) {\n      success\n      message\n      template {\n        id\n        name\n        description\n        isDefault\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation DeleteMusicClockTemplate($id: ID!) {\n    deleteMusicClockTemplate(id: $id) {\n      success\n      message\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteMusicClockTemplate($id: ID!) {\n    deleteMusicClockTemplate(id: $id) {\n      success\n      message\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation SetDefaultMusicClockTemplate($networkId: ID!, $templateId: ID!) {\n    setDefaultMusicClockTemplate(networkId: $networkId, templateId: $templateId) {\n      success\n      message\n    }\n  }\n"): (typeof documents)["\n  mutation SetDefaultMusicClockTemplate($networkId: ID!, $templateId: ID!) {\n    setDefaultMusicClockTemplate(networkId: $networkId, templateId: $templateId) {\n      success\n      message\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation AssignClockToTemplate($input: AssignClockToTemplateInput!) {\n    assignClockToTemplate(input: $input) {\n      success\n      message\n      assignment {\n        id\n        dayOfWeek\n        hour\n        clock {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AssignClockToTemplate($input: AssignClockToTemplateInput!) {\n    assignClockToTemplate(input: $input) {\n      success\n      message\n      assignment {\n        id\n        dayOfWeek\n        hour\n        clock {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation RemoveClockFromTemplate($id: ID!) {\n    removeClockFromTemplate(id: $id) {\n      success\n      message\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveClockFromTemplate($id: ID!) {\n    removeClockFromTemplate(id: $id) {\n      success\n      message\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation CreateWeeklyOverride($input: CreateWeeklyOverrideInput!) {\n    createWeeklyOverride(input: $input) {\n      success\n      message\n      override {\n        id\n        weekCommencing\n        dayOfWeek\n        hour\n        reason\n        clock {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateWeeklyOverride($input: CreateWeeklyOverrideInput!) {\n    createWeeklyOverride(input: $input) {\n      success\n      message\n      override {\n        id\n        weekCommencing\n        dayOfWeek\n        hour\n        reason\n        clock {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation RemoveWeeklyOverride($id: ID!) {\n    removeWeeklyOverride(id: $id) {\n      success\n      message\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveWeeklyOverride($id: ID!) {\n    removeWeeklyOverride(id: $id) {\n      success\n      message\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateEpisode($input: UpdateEpisodeInput!) {\n    updateEpisode(input: $input) {\n      episode {\n        id\n        name\n        description\n        duration {\n            formatted\n            raw\n        }\n        extraData\n        shortId\n        createdAt\n        updatedAt\n        url\n        featuredImage {\n            id\n            key\n            type\n            mimeType\n            fileSize {\n                label\n                raw\n            }\n            urls {\n                medium\n                square\n            }\n        }\n        show {\n            id\n            shortName\n        }\n        series {\n            id\n            shortName\n        }\n        presenters {\n            id\n            name\n        }\n        networks {\n            id\n            name\n            logoSvgIcon\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateEpisode($input: UpdateEpisodeInput!) {\n    updateEpisode(input: $input) {\n      episode {\n        id\n        name\n        description\n        duration {\n            formatted\n            raw\n        }\n        extraData\n        shortId\n        createdAt\n        updatedAt\n        url\n        featuredImage {\n            id\n            key\n            type\n            mimeType\n            fileSize {\n                label\n                raw\n            }\n            urls {\n                medium\n                square\n            }\n        }\n        show {\n            id\n            shortName\n        }\n        series {\n            id\n            shortName\n        }\n        presenters {\n            id\n            name\n        }\n        networks {\n            id\n            name\n            logoSvgIcon\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateMusicClock($input: UpdateMusicClockInput!) {\n    updateMusicClock(input: $input) {\n      success\n      message\n      clock {\n        id\n        name\n        description\n        color\n        targetRuntime\n        network {\n          id\n          name\n        }\n        items {\n          ... on TrackClockItem {\n            ...CommonClockItemFields\n            track {\n              id\n              title\n            }\n          }\n          ... on SubcategoryClockItem {\n            ...CommonClockItemFields\n            subcategory {\n              id\n              name\n              category {\n                id\n                name\n              }\n            }\n          }\n          ... on GenreClockItem {\n            ...CommonClockItemFields\n            genre {\n              id\n              name\n            }\n          }\n          ... on NoteClockItem {\n            ...CommonClockItemFields\n            label\n            content\n          }\n          ... on AdBreakClockItem {\n            ...CommonClockItemFields\n            scheduledStartTime\n          }\n          ... on CommandClockItem {\n            ...CommonClockItemFields\n            command\n          }\n        }\n      }\n    }\n  }\n\n  fragment CommonClockItemFields on ClockItemInterface {\n    id\n    clockId\n    createdAt\n    duration\n    orderIndex\n    updatedAt\n  }\n"): (typeof documents)["\n  mutation UpdateMusicClock($input: UpdateMusicClockInput!) {\n    updateMusicClock(input: $input) {\n      success\n      message\n      clock {\n        id\n        name\n        description\n        color\n        targetRuntime\n        network {\n          id\n          name\n        }\n        items {\n          ... on TrackClockItem {\n            ...CommonClockItemFields\n            track {\n              id\n              title\n            }\n          }\n          ... on SubcategoryClockItem {\n            ...CommonClockItemFields\n            subcategory {\n              id\n              name\n              category {\n                id\n                name\n              }\n            }\n          }\n          ... on GenreClockItem {\n            ...CommonClockItemFields\n            genre {\n              id\n              name\n            }\n          }\n          ... on NoteClockItem {\n            ...CommonClockItemFields\n            label\n            content\n          }\n          ... on AdBreakClockItem {\n            ...CommonClockItemFields\n            scheduledStartTime\n          }\n          ... on CommandClockItem {\n            ...CommonClockItemFields\n            command\n          }\n        }\n      }\n    }\n  }\n\n  fragment CommonClockItemFields on ClockItemInterface {\n    id\n    clockId\n    createdAt\n    duration\n    orderIndex\n    updatedAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateNetwork($input: UpdateNetworkInput!) {\n    updateNetwork(input: $input) {\n      success\n      message\n      network {\n        id\n        name\n        code\n        baseUrl\n        imagesUrl\n        logoSvg\n        logoSvgCircular\n        logoSvgColor\n        logoSvgIcon\n        networkType\n        tagline\n        cssUrl\n        playFormat\n        playUrl\n        shortId\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateNetwork($input: UpdateNetworkInput!) {\n    updateNetwork(input: $input) {\n      success\n      message\n      network {\n        id\n        name\n        code\n        baseUrl\n        imagesUrl\n        logoSvg\n        logoSvgCircular\n        logoSvgColor\n        logoSvgIcon\n        networkType\n        tagline\n        cssUrl\n        playFormat\n        playUrl\n        shortId\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdatePresenter($input: UpdatePresenterInput!) {\n    updatePresenter(input: $input) {\n      presenter {\n        id\n        name\n        bio\n        shortBio\n        hidden\n        hero\n        picture\n        networks {\n          id\n          name\n          logoSvgIcon\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdatePresenter($input: UpdatePresenterInput!) {\n    updatePresenter(input: $input) {\n      presenter {\n        id\n        name\n        bio\n        shortBio\n        hidden\n        hero\n        picture\n        networks {\n          id\n          name\n          logoSvgIcon\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateScheduleItem($input: UpdateScheduleItemInput!) {\n    updateScheduleItem(input: $input) {\n      scheduleItem {\n        id\n        end\n        start\n        networks {\n          id\n          name\n        }\n        episode {\n          id\n          name\n          show {\n            shortName\n          }\n          description\n          broadcasts {\n            id\n            start\n            end\n          }\n          featuredImage {\n            urls {\n              square\n              customSquare(size: 150)\n            }\n          }\n          networks {\n            id\n            logoSvgIcon\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateScheduleItem($input: UpdateScheduleItemInput!) {\n    updateScheduleItem(input: $input) {\n      scheduleItem {\n        id\n        end\n        start\n        networks {\n          id\n          name\n        }\n        episode {\n          id\n          name\n          show {\n            shortName\n          }\n          description\n          broadcasts {\n            id\n            start\n            end\n          }\n          featuredImage {\n            urls {\n              square\n              customSquare(size: 150)\n            }\n          }\n          networks {\n            id\n            logoSvgIcon\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateScheduleTemplate($input: UpdateDefaultScheduleInput!) {\n    updateDefaultSchedule(input: $input) {\n      defaultSchedule {\n        id\n        name\n        assignedTo\n        networks {\n          id\n          name\n          code\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateScheduleTemplate($input: UpdateDefaultScheduleInput!) {\n    updateDefaultSchedule(input: $input) {\n      defaultSchedule {\n        id\n        name\n        assignedTo\n        networks {\n          id\n          name\n          code\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateSeries($input: UpdateSeriesInput!) {\n    updateSeries(input: $input) {\n      series {\n        id\n        fullName\n        shortName\n        fullDesc\n        shortDesc\n        archived\n        featuredImage {\n          id\n          key\n          type\n          mimeType\n          fileSize {\n            label\n            raw\n          }\n          urls {\n            medium\n            square\n          }\n        }\n        show {\n          id\n          shortName\n          fullName\n        }\n        network {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateSeries($input: UpdateSeriesInput!) {\n    updateSeries(input: $input) {\n      series {\n        id\n        fullName\n        shortName\n        fullDesc\n        shortDesc\n        archived\n        featuredImage {\n          id\n          key\n          type\n          mimeType\n          fileSize {\n            label\n            raw\n          }\n          urls {\n            medium\n            square\n          }\n        }\n        show {\n          id\n          shortName\n          fullName\n        }\n        network {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateShow($input: UpdateShowInput!) {\n    updateShow(input: $input) {\n      show {\n        id\n        fullName\n        shortName\n        fullDesc\n        shortDesc\n        hidden\n        extraData\n        featuredImage {\n            id\n            key\n            type\n            mimeType\n            fileSize {\n                label\n                raw\n            }\n            urls {\n                medium\n                square\n            }\n        }\n        networks {\n          id\n          name\n          logoSvgIcon\n        }\n        presenters {\n          id\n          name\n        }\n        series {\n          items {\n            id\n            fullName\n          }\n        }\n        totalEpisodes\n        createdAt\n        updatedAt\n        url\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateShow($input: UpdateShowInput!) {\n    updateShow(input: $input) {\n      show {\n        id\n        fullName\n        shortName\n        fullDesc\n        shortDesc\n        hidden\n        extraData\n        featuredImage {\n            id\n            key\n            type\n            mimeType\n            fileSize {\n                label\n                raw\n            }\n            urls {\n                medium\n                square\n            }\n        }\n        networks {\n          id\n          name\n          logoSvgIcon\n        }\n        presenters {\n          id\n          name\n        }\n        series {\n          items {\n            id\n            fullName\n          }\n        }\n        totalEpisodes\n        createdAt\n        updatedAt\n        url\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateTemplateAssignment($input: UpdateMusicAssignmentInput!) {\n    updateMusicAssignment(input: $input) {\n      success\n      message\n      assignment {\n        id\n        isTemplate\n        clockId\n        dayOfWeek\n        hour\n        clock {\n          id\n          name\n          color\n          targetRuntime\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateTemplateAssignment($input: UpdateMusicAssignmentInput!) {\n    updateMusicAssignment(input: $input) {\n      success\n      message\n      assignment {\n        id\n        isTemplate\n        clockId\n        dayOfWeek\n        hour\n        clock {\n          id\n          name\n          color\n          targetRuntime\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateTrack($input: UpdateTrackInput!) {\n    updateTrack(input: $input) {\n      success\n      message\n      track {\n        id\n        title\n        artist\n        album\n        year\n        genre {\n          id\n          name\n        }\n        subcategory {\n          id\n          name\n          category {\n            id\n            name\n          }\n        }\n        isrc\n        label\n        copyright\n        composer\n        publisher\n        image\n        metadata {\n          id\n          key\n          value\n        }\n        enabled\n        dateAdded\n        dateModified\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateTrack($input: UpdateTrackInput!) {\n    updateTrack(input: $input) {\n      success\n      message\n      track {\n        id\n        title\n        artist\n        album\n        year\n        genre {\n          id\n          name\n        }\n        subcategory {\n          id\n          name\n          category {\n            id\n            name\n          }\n        }\n        isrc\n        label\n        copyright\n        composer\n        publisher\n        image\n        metadata {\n          id\n          key\n          value\n        }\n        enabled\n        dateAdded\n        dateModified\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation UpdateTrackMetadata($input: UpdateTrackMetadataInput!) {\n    updateTrackMetadata(input: $input) {\n      success\n      message\n      track {\n        id\n        metadata {\n          id\n          key\n          value\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateTrackMetadata($input: UpdateTrackMetadataInput!) {\n    updateTrackMetadata(input: $input) {\n      success\n      message\n      track {\n        id\n        metadata {\n          id\n          key\n          value\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetCategories {\n    categories {\n      id\n      name\n      subcategories {\n        id\n        name\n        averageDuration {\n          raw\n          formatted\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCategories {\n    categories {\n      id\n      name\n      subcategories {\n        id\n        name\n        averageDuration {\n          raw\n          formatted\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n\tquery Debug {\n\t\tdebug {\n\t\t\tid\n\t\t\tstatus\n\t\t\trandomShow {\n\t\t\t\tid\n\t\t\t\tshortName\n\t\t\t\tepisodes {\n\t\t\t\t\ttotal\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n"): (typeof documents)["\n\tquery Debug {\n\t\tdebug {\n\t\t\tid\n\t\t\tstatus\n\t\t\trandomShow {\n\t\t\t\tid\n\t\t\t\tshortName\n\t\t\t\tepisodes {\n\t\t\t\t\ttotal\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query SearchDefaultSchedule($filters: DefaultScheduleListInput!) {\n        defaultSchedules(\n            filters: $filters\n        ) {\n      total\n      items {\n        id\n        assignedTo\n        name\n        networks {\n            id\n            name\n            logoSvgIcon\n        }\n        items {\n          id\n          start\n          end\n          episodeName\n          media {\n            id\n            urls {\n              customSquare(size: 120)\n            }\n          }\n          show {\n            id\n            shortName\n            featuredImage {\n              urls {\n                customSquare(size: 120)\n              }\n            }\n          }\n        }\n      }\n    }\n}"): (typeof documents)["\n    query SearchDefaultSchedule($filters: DefaultScheduleListInput!) {\n        defaultSchedules(\n            filters: $filters\n        ) {\n      total\n      items {\n        id\n        assignedTo\n        name\n        networks {\n            id\n            name\n            logoSvgIcon\n        }\n        items {\n          id\n          start\n          end\n          episodeName\n          media {\n            id\n            urls {\n              customSquare(size: 120)\n            }\n          }\n          show {\n            id\n            shortName\n            featuredImage {\n              urls {\n                customSquare(size: 120)\n              }\n            }\n          }\n        }\n      }\n    }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetDefaultSchedules($filters: DefaultScheduleListInput!) {\n    defaultSchedules(filters: $filters) {\n      total\n      items {\n        id\n        name\n        assignedTo\n        networks {\n          id\n          name\n          logoSvgIcon\n        }\n        items {\n          id\n          start\n          end\n          episodeName\n          media {\n            id\n            urls {\n              customSquare(size: 120)\n            }\n          }\n          show {\n            id\n            shortName\n            featuredImage {\n              urls {\n                customSquare(size: 120)\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetDefaultSchedules($filters: DefaultScheduleListInput!) {\n    defaultSchedules(filters: $filters) {\n      total\n      items {\n        id\n        name\n        assignedTo\n        networks {\n          id\n          name\n          logoSvgIcon\n        }\n        items {\n          id\n          start\n          end\n          episodeName\n          media {\n            id\n            urls {\n              customSquare(size: 120)\n            }\n          }\n          show {\n            id\n            shortName\n            featuredImage {\n              urls {\n                customSquare(size: 120)\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetDefaultSchedule($id: ID!) {\n    defaultSchedule(id: $id) {\n      id\n      name\n      assignedTo\n      networks {\n        id\n        name\n        code\n      }\n      items {\n        id\n        start\n        end\n        endsNextDay\n        episodeName\n        episodeDesc\n        show {\n          id\n          fullName\n          shortName\n          featuredImage {\n            urls {\n              customSquare(size: 120)\n            }\n          }\n        }\n        series {\n          id\n          fullName\n          shortName\n        }\n        presenters {\n          id\n          name\n        }\n        media {\n          id\n          key\n          urls {\n            medium\n            original\n          }\n        }\n        networks {\n          id\n          name\n          code\n          logoSvgIcon\n        }\n        existingEpisode {\n          id\n          name\n          description\n        }\n        repeatOf {\n          id\n          episodeName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetDefaultSchedule($id: ID!) {\n    defaultSchedule(id: $id) {\n      id\n      name\n      assignedTo\n      networks {\n        id\n        name\n        code\n      }\n      items {\n        id\n        start\n        end\n        endsNextDay\n        episodeName\n        episodeDesc\n        show {\n          id\n          fullName\n          shortName\n          featuredImage {\n            urls {\n              customSquare(size: 120)\n            }\n          }\n        }\n        series {\n          id\n          fullName\n          shortName\n        }\n        presenters {\n          id\n          name\n        }\n        media {\n          id\n          key\n          urls {\n            medium\n            original\n          }\n        }\n        networks {\n          id\n          name\n          code\n          logoSvgIcon\n        }\n        existingEpisode {\n          id\n          name\n          description\n        }\n        repeatOf {\n          id\n          episodeName\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SearchEpisodes($filters: EpisodeListInput) {\n    episodes(filters: $filters) {\n      items {\n        id\n        name\n        show {\n          id\n          shortName\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchEpisodes($filters: EpisodeListInput) {\n    episodes(filters: $filters) {\n      items {\n        id\n        name\n        show {\n          id\n          shortName\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SearchEpisodesV2($filters: EpisodeListInputV2) {\n    episodesV2(filters: $filters) {\n      total\n      items {\n        id\n        shortId\n        name\n        description\n        createdAt\n        updatedAt\n        duration {\n          formatted\n          raw\n        }\n        featuredImage {\n          urls {\n            square\n          }\n        }\n        show {\n          id\n          shortName\n          shortId\n        }\n        presenters {\n          id\n          name\n        }\n        networks {\n          id\n          name\n          logoSvgIcon\n        }\n        series {\n          id\n          shortName\n        }\n        broadcasts {\n          id\n          start\n          end\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchEpisodesV2($filters: EpisodeListInputV2) {\n    episodesV2(filters: $filters) {\n      total\n      items {\n        id\n        shortId\n        name\n        description\n        createdAt\n        updatedAt\n        duration {\n          formatted\n          raw\n        }\n        featuredImage {\n          urls {\n            square\n          }\n        }\n        show {\n          id\n          shortName\n          shortId\n        }\n        presenters {\n          id\n          name\n        }\n        networks {\n          id\n          name\n          logoSvgIcon\n        }\n        series {\n          id\n          shortName\n        }\n        broadcasts {\n          id\n          start\n          end\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetEpisode($id: ID!) {\n    episode(id: $id) {\n      id\n      name\n      description\n      duration {\n        formatted\n        raw\n      }\n      extraData\n      shortId\n      createdAt\n      updatedAt\n      url\n      featuredImage {\n        id\n        key\n        type\n        mimeType\n        fileSize {\n          label\n          raw\n        }\n        urls {\n          medium\n          square\n        }\n      }\n      show {\n        id\n        shortName\n      }\n      series {\n        id\n        shortName\n      }\n      presenters {\n        id\n        name\n      }\n      networks {\n        id\n        name\n        logoSvgIcon\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetEpisode($id: ID!) {\n    episode(id: $id) {\n      id\n      name\n      description\n      duration {\n        formatted\n        raw\n      }\n      extraData\n      shortId\n      createdAt\n      updatedAt\n      url\n      featuredImage {\n        id\n        key\n        type\n        mimeType\n        fileSize {\n          label\n          raw\n        }\n        urls {\n          medium\n          square\n        }\n      }\n      show {\n        id\n        shortName\n      }\n      series {\n        id\n        shortName\n      }\n      presenters {\n        id\n        name\n      }\n      networks {\n        id\n        name\n        logoSvgIcon\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetEpisodeDetails($id: ID!) {\n    episode(id: $id) {\n    \tid\n      name\n      show {\n        id\n        shortName\n      }\n      description\n      broadcasts {\n        id\n      }\n      featuredImage {\n        urls {\n          square\n          customSquare(size: 150)\n        }\n      }\n      networks {\n        id\n        logoSvgIcon\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetEpisodeDetails($id: ID!) {\n    episode(id: $id) {\n    \tid\n      name\n      show {\n        id\n        shortName\n      }\n      description\n      broadcasts {\n        id\n      }\n      featuredImage {\n        urls {\n          square\n          customSquare(size: 150)\n        }\n      }\n      networks {\n        id\n        logoSvgIcon\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetGenres($filters: GenreListInputV2) {\n      genresV2(filters: $filters) {\n        items {\n          id\n          name\n        }\n      }\n  }\n"): (typeof documents)["\n  query GetGenres($filters: GenreListInputV2) {\n      genresV2(filters: $filters) {\n        items {\n          id\n          name\n        }\n      }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetJobs($limit: Int, $status: JobStatus, $type: JobType) {\n    jobs(limit: $limit, status: $status, type: $type) {\n      id\n      type\n      status\n      sourceUrl\n      searchQuery\n      progress\n      errorMessage\n      songId\n      createdAt\n      updatedAt\n      completedAt\n    }\n  }\n"): (typeof documents)["\n  query GetJobs($limit: Int, $status: JobStatus, $type: JobType) {\n    jobs(limit: $limit, status: $status, type: $type) {\n      id\n      type\n      status\n      sourceUrl\n      searchQuery\n      progress\n      errorMessage\n      songId\n      createdAt\n      updatedAt\n      completedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetJob($id: ID!) {\n    job(id: $id) {\n      id\n      type\n      status\n      sourceUrl\n      searchQuery\n      progress\n      errorMessage\n      songId\n      createdAt\n      updatedAt\n      completedAt\n    }\n  }\n"): (typeof documents)["\n  query GetJob($id: ID!) {\n    job(id: $id) {\n      id\n      type\n      status\n      sourceUrl\n      searchQuery\n      progress\n      errorMessage\n      songId\n      createdAt\n      updatedAt\n      completedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetMedia($id: ID!) {\n    media(id: $id) {\n      id\n      key\n      type\n      mimeType\n      fileSize {\n        label\n        raw\n      }\n      urls {\n        medium\n        square\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetMedia($id: ID!) {\n    media(id: $id) {\n      id\n      key\n      type\n      mimeType\n      fileSize {\n        label\n        raw\n      }\n      urls {\n        medium\n        square\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SearchMedia($filters: MediaListInput) {\n    mediaList(filters: $filters) {\n      total\n      items {\n        id\n        key\n        type\n        mimeType\n        fileSize {\n          label\n          raw\n        }\n        urls {\n          medium\n          square\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchMedia($filters: MediaListInput) {\n    mediaList(filters: $filters) {\n      total\n      items {\n        id\n        key\n        type\n        mimeType\n        fileSize {\n          label\n          raw\n        }\n        urls {\n          medium\n          square\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetMusicClockAssignments($networkId: ID!, $filters: MusicAssignmentFilters) {\n    musicClockAssignments(networkId: $networkId, filters: $filters) {\n      id\n      clock {\n        id\n        name\n        targetRuntime\n      }\n      dayOfWeek\n      hour\n      startDate\n      endDate\n      priority\n      isTemplate\n      network {\n        id\n        name\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query GetMusicClockAssignments($networkId: ID!, $filters: MusicAssignmentFilters) {\n    musicClockAssignments(networkId: $networkId, filters: $filters) {\n      id\n      clock {\n        id\n        name\n        targetRuntime\n      }\n      dayOfWeek\n      hour\n      startDate\n      endDate\n      priority\n      isTemplate\n      network {\n        id\n        name\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetMusicPlaylists($networkId: ID!, $filters: MusicPlaylistFilters!) {\n    musicPlaylists(networkId: $networkId, filters: $filters) {\n      id\n      shortId\n      scheduledDate\n      scheduledHour\n      status\n      totalDuration\n      estimatedDuration\n      isLocked\n      notes\n      clock {\n        id\n        name\n      }\n      items {\n        id\n        orderIndex\n        itemType\n        track {\n          id\n          title\n          artist\n          duration {\n            formatted\n          }\n        }\n        scheduledStart\n        scheduledEnd\n        actualDuration\n        isManualEdit\n        notes\n      }\n      ruleViolations {\n        id\n        rule {\n          id\n          name\n          ruleType\n        }\n        severity\n        description\n        suggestedFix\n        autoFixAvailable\n      }\n      network {\n        id\n        name\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query GetMusicPlaylists($networkId: ID!, $filters: MusicPlaylistFilters!) {\n    musicPlaylists(networkId: $networkId, filters: $filters) {\n      id\n      shortId\n      scheduledDate\n      scheduledHour\n      status\n      totalDuration\n      estimatedDuration\n      isLocked\n      notes\n      clock {\n        id\n        name\n      }\n      items {\n        id\n        orderIndex\n        itemType\n        track {\n          id\n          title\n          artist\n          duration {\n            formatted\n          }\n        }\n        scheduledStart\n        scheduledEnd\n        actualDuration\n        isManualEdit\n        notes\n      }\n      ruleViolations {\n        id\n        rule {\n          id\n          name\n          ruleType\n        }\n        severity\n        description\n        suggestedFix\n        autoFixAvailable\n      }\n      network {\n        id\n        name\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetMusicClocks($networkId: ID!, $filters: MusicClockFilters) {\n    musicClocks(networkId: $networkId, filters: $filters) {\n      id\n      name\n      description\n      color\n      targetRuntime\n      network {\n        id\n        name\n        logoSvgIcon\n      }\n      createdAt\n      updatedAt\n      items {\n        ... on TrackClockItem {\n          ...CommonClockItemFields\n          track {\n            id\n            title\n          }\n        }\n        ... on SubcategoryClockItem {\n          ...CommonClockItemFields\n          subcategory {\n            id\n            name\n            category {\n              id\n              name\n            }\n          }\n        }\n        ... on GenreClockItem {\n          ...CommonClockItemFields\n          genre {\n            id\n            name\n          }\n        }\n        ... on NoteClockItem {\n          ...CommonClockItemFields\n          label\n          content\n        }\n        ... on AdBreakClockItem {\n          ...CommonClockItemFields\n          scheduledStartTime\n        }\n        ... on CommandClockItem {\n          ...CommonClockItemFields\n          command\n        }\n      }\n    }\n  }\n\n  fragment CommonClockItemFields on ClockItemInterface {\n    id\n    clockId\n    createdAt\n    duration\n    orderIndex\n    updatedAt\n  }\n"): (typeof documents)["\n  query GetMusicClocks($networkId: ID!, $filters: MusicClockFilters) {\n    musicClocks(networkId: $networkId, filters: $filters) {\n      id\n      name\n      description\n      color\n      targetRuntime\n      network {\n        id\n        name\n        logoSvgIcon\n      }\n      createdAt\n      updatedAt\n      items {\n        ... on TrackClockItem {\n          ...CommonClockItemFields\n          track {\n            id\n            title\n          }\n        }\n        ... on SubcategoryClockItem {\n          ...CommonClockItemFields\n          subcategory {\n            id\n            name\n            category {\n              id\n              name\n            }\n          }\n        }\n        ... on GenreClockItem {\n          ...CommonClockItemFields\n          genre {\n            id\n            name\n          }\n        }\n        ... on NoteClockItem {\n          ...CommonClockItemFields\n          label\n          content\n        }\n        ... on AdBreakClockItem {\n          ...CommonClockItemFields\n          scheduledStartTime\n        }\n        ... on CommandClockItem {\n          ...CommonClockItemFields\n          command\n        }\n      }\n    }\n  }\n\n  fragment CommonClockItemFields on ClockItemInterface {\n    id\n    clockId\n    createdAt\n    duration\n    orderIndex\n    updatedAt\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetMusicClock($id: ID!) {\n    musicClock(id: $id) {\n      id\n      name\n      description\n      color\n      targetRuntime\n      network {\n        id\n        name\n      }\n      createdAt\n      updatedAt\n      items {\n        ...on TrackClockItem {\n          ...CommonClockItemFields,\n          track {\n            id\n            title\n          }\n        }\n        ... on SubcategoryClockItem {\n          ...CommonClockItemFields,\n          subcategory {\n            id\n            name\n            category {\n              id\n              name\n            }\n          }\n        }\n        ... on GenreClockItem {\n          ...CommonClockItemFields,\n          genre {\n            id\n            name\n          }\n        }\n        ... on NoteClockItem {\n          ...CommonClockItemFields\n          label\n          content\n        }\n        ... on AdBreakClockItem {\n          ...CommonClockItemFields\n          scheduledStartTime\n        }\n        ... on CommandClockItem {\n          ...CommonClockItemFields\n          command\n        }\n      }\n    }\n  }\n\nfragment CommonClockItemFields on ClockItemInterface {\n\tid\n\tclockId\n\tcreatedAt\n\tduration\n\torderIndex\n\tupdatedAt\n}\n"): (typeof documents)["\n  query GetMusicClock($id: ID!) {\n    musicClock(id: $id) {\n      id\n      name\n      description\n      color\n      targetRuntime\n      network {\n        id\n        name\n      }\n      createdAt\n      updatedAt\n      items {\n        ...on TrackClockItem {\n          ...CommonClockItemFields,\n          track {\n            id\n            title\n          }\n        }\n        ... on SubcategoryClockItem {\n          ...CommonClockItemFields,\n          subcategory {\n            id\n            name\n            category {\n              id\n              name\n            }\n          }\n        }\n        ... on GenreClockItem {\n          ...CommonClockItemFields,\n          genre {\n            id\n            name\n          }\n        }\n        ... on NoteClockItem {\n          ...CommonClockItemFields\n          label\n          content\n        }\n        ... on AdBreakClockItem {\n          ...CommonClockItemFields\n          scheduledStartTime\n        }\n        ... on CommandClockItem {\n          ...CommonClockItemFields\n          command\n        }\n      }\n    }\n  }\n\nfragment CommonClockItemFields on ClockItemInterface {\n\tid\n\tclockId\n\tcreatedAt\n\tduration\n\torderIndex\n\tupdatedAt\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetMusicRules($networkId: ID, $filters: MusicRuleFilters) {\n    musicRules(networkId: $networkId, filters: $filters) {\n      id\n      name\n      description\n      ruleType\n      breakable\n      value\n      unit\n      criteria {\n        categories\n        genres\n        artists\n        tags\n        timeWindows {\n          startHour\n          endHour\n          daysOfWeek\n        }\n      }\n      priority\n      isActive\n      network {\n        id\n        name\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query GetMusicRules($networkId: ID, $filters: MusicRuleFilters) {\n    musicRules(networkId: $networkId, filters: $filters) {\n      id\n      name\n      description\n      ruleType\n      breakable\n      value\n      unit\n      criteria {\n        categories\n        genres\n        artists\n        tags\n        timeWindows {\n          startHour\n          endHour\n          daysOfWeek\n        }\n      }\n      priority\n      isActive\n      network {\n        id\n        name\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetMusicRule($id: ID!) {\n    musicRule(id: $id) {\n      id\n      name\n      description\n      ruleType\n      breakable\n      value\n      unit\n      criteria {\n        categories\n        genres\n        artists\n        tags\n        timeWindows {\n          startHour\n          endHour\n          daysOfWeek\n        }\n      }\n      priority\n      isActive\n      network {\n        id\n        name\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query GetMusicRule($id: ID!) {\n    musicRule(id: $id) {\n      id\n      name\n      description\n      ruleType\n      breakable\n      value\n      unit\n      criteria {\n        categories\n        genres\n        artists\n        tags\n        timeWindows {\n          startHour\n          endHour\n          daysOfWeek\n        }\n      }\n      priority\n      isActive\n      network {\n        id\n        name\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query MusicSchedules($networkId: ID!, $startDate: Date!, $endDate: Date!) {\n    musicSchedules(networkId: $networkId, startDate: $startDate, endDate: $endDate) {\n      id\n      networkId\n      scheduledDate\n      hour\n      clockId\n      playlistName\n      exportedToRadioDj\n      ruleViolations {\n        ruleId\n        ruleName\n        ruleType\n        severity\n        description\n        conflictTrackId\n        conflictTime\n      }\n      items {\n        id\n        orderIndex\n        itemType\n        trackId\n        track {\n          id\n          title\n          artist\n          duration {\n            formatted\n          }\n        }\n        noteContent\n        duration\n        startTime\n        ruleViolations {\n          ruleId\n          ruleName\n          ruleType\n          severity\n          description\n          conflictTrackId\n          conflictTime\n        }\n      }\n      clock {\n        id\n        name\n        color\n        targetRuntime\n      }\n    }\n  }\n"): (typeof documents)["\n  query MusicSchedules($networkId: ID!, $startDate: Date!, $endDate: Date!) {\n    musicSchedules(networkId: $networkId, startDate: $startDate, endDate: $endDate) {\n      id\n      networkId\n      scheduledDate\n      hour\n      clockId\n      playlistName\n      exportedToRadioDj\n      ruleViolations {\n        ruleId\n        ruleName\n        ruleType\n        severity\n        description\n        conflictTrackId\n        conflictTime\n      }\n      items {\n        id\n        orderIndex\n        itemType\n        trackId\n        track {\n          id\n          title\n          artist\n          duration {\n            formatted\n          }\n        }\n        noteContent\n        duration\n        startTime\n        ruleViolations {\n          ruleId\n          ruleName\n          ruleType\n          severity\n          description\n          conflictTrackId\n          conflictTime\n        }\n      }\n      clock {\n        id\n        name\n        color\n        targetRuntime\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query WeeklyOverrides($networkId: ID!, $templateId: ID!, $weekCommencing: String!) {\n    musicClockWeeklyOverrides(networkId: $networkId, templateId: $templateId, weekCommencing: $weekCommencing) {\n      id\n      networkId\n      templateId\n      clockId\n      weekCommencing\n      dayOfWeek\n      hour\n      reason\n      clock {\n        id\n        name\n        color\n        targetRuntime\n      }\n    }\n  }\n"): (typeof documents)["\n  query WeeklyOverrides($networkId: ID!, $templateId: ID!, $weekCommencing: String!) {\n    musicClockWeeklyOverrides(networkId: $networkId, templateId: $templateId, weekCommencing: $weekCommencing) {\n      id\n      networkId\n      templateId\n      clockId\n      weekCommencing\n      dayOfWeek\n      hour\n      reason\n      clock {\n        id\n        name\n        color\n        targetRuntime\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n\tquery GetNetworks {\n\t\tnetworks {\n\t\t\tid\n\t\t\tname\n\t\t\tcode\n\t\t\tbaseUrl\n\t\t\timagesUrl\n\t\t\tlogoSvg\n\t\t\tlogoSvgCircular\n\t\t\tlogoSvgColor\n\t\t\tlogoSvgIcon\n\t\t\tnetworkType\n\t\t\ttagline\n\t\t\tcssUrl\n\t\t\tplayFormat\n\t\t\tplayUrl\n\t\t\tshortId\n\t\t}\n\t}\n"): (typeof documents)["\n\tquery GetNetworks {\n\t\tnetworks {\n\t\t\tid\n\t\t\tname\n\t\t\tcode\n\t\t\tbaseUrl\n\t\t\timagesUrl\n\t\t\tlogoSvg\n\t\t\tlogoSvgCircular\n\t\t\tlogoSvgColor\n\t\t\tlogoSvgIcon\n\t\t\tnetworkType\n\t\t\ttagline\n\t\t\tcssUrl\n\t\t\tplayFormat\n\t\t\tplayUrl\n\t\t\tshortId\n\t\t}\n\t}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n\tquery GetNetwork($id: ID!) {\n\t\tnetwork(id: $id) {\n\t\t\tid\n\t\t\tname\n\t\t\tcode\n\t\t\tbaseUrl\n\t\t\timagesUrl\n\t\t\tlogoSvg\n\t\t\tlogoSvgCircular\n\t\t\tlogoSvgColor\n\t\t\tlogoSvgIcon\n\t\t\tnetworkType\n\t\t\ttagline\n\t\t\tcssUrl\n\t\t\tplayFormat\n\t\t\tplayUrl\n\t\t\tshortId\n\t\t}\n\t}\n"): (typeof documents)["\n\tquery GetNetwork($id: ID!) {\n\t\tnetwork(id: $id) {\n\t\t\tid\n\t\t\tname\n\t\t\tcode\n\t\t\tbaseUrl\n\t\t\timagesUrl\n\t\t\tlogoSvg\n\t\t\tlogoSvgCircular\n\t\t\tlogoSvgColor\n\t\t\tlogoSvgIcon\n\t\t\tnetworkType\n\t\t\ttagline\n\t\t\tcssUrl\n\t\t\tplayFormat\n\t\t\tplayUrl\n\t\t\tshortId\n\t\t}\n\t}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n\tquery GetPresenters($filters: PresenterListInputV2) {\n\t\tpresentersV2(filters: $filters) {\n\t\t\ttotal\n            items {\n                id\n                name\n                picture\n                hidden\n                networks {\n                    id\n                    name\n                    logoSvgIcon\n                }\n            }\n\t\t}\n\t}\n"): (typeof documents)["\n\tquery GetPresenters($filters: PresenterListInputV2) {\n\t\tpresentersV2(filters: $filters) {\n\t\t\ttotal\n            items {\n                id\n                name\n                picture\n                hidden\n                networks {\n                    id\n                    name\n                    logoSvgIcon\n                }\n            }\n\t\t}\n\t}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n\tquery GetPresenter($id: ID!) {\n\t\tpresenter(id: $id) {\n            id\n            name\n            bio\n            hero\n            hidden\n            shortBio\n            picture\n            shows {\n                total\n                \n            }\n            episodes {\n                total    \n            }\n            networks {\n                id\n            }\n\t\t}\n\t}\n"): (typeof documents)["\n\tquery GetPresenter($id: ID!) {\n\t\tpresenter(id: $id) {\n            id\n            name\n            bio\n            hero\n            hidden\n            shortBio\n            picture\n            shows {\n                total\n                \n            }\n            episodes {\n                total    \n            }\n            networks {\n                id\n            }\n\t\t}\n\t}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query Schedule(\n\t$from: DateTime!\n\t$network: ID!\n\t$to: DateTime\n) {\n\tschedule(\n\t\tfilters: { from: $from, networkId: $network, to: $to, amount: 200 }\n\t) {\n\t\ttotal\n\t\titems {\n\t\t\tid\n\t\t\tstart\n\t\t\tend\n\t\t\tnetworks {\n\t\t\t\tid\n                name\n                logoSvgIcon\n\t\t\t}\n\t\t\tepisode {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\tshow {\n\t\t\t\t\tid\n\t\t\t\t\tshortName\n\t\t\t\t}\n\t\t\t\tdescription\n\t\t\t\tbroadcasts {\n\t\t\t\t\tid\n\t\t\t\t}\n\t\t\t\tfeaturedImage {\n\t\t\t\t\turls {\n\t\t\t\t\t\tsquare\n\t\t\t\t\t\tcustomSquare(size: 150)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnetworks {\n\t\t\t\t\tid\n\t\t\t\t\tlogoSvgIcon\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n"): (typeof documents)["\n    query Schedule(\n\t$from: DateTime!\n\t$network: ID!\n\t$to: DateTime\n) {\n\tschedule(\n\t\tfilters: { from: $from, networkId: $network, to: $to, amount: 200 }\n\t) {\n\t\ttotal\n\t\titems {\n\t\t\tid\n\t\t\tstart\n\t\t\tend\n\t\t\tnetworks {\n\t\t\t\tid\n                name\n                logoSvgIcon\n\t\t\t}\n\t\t\tepisode {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\tshow {\n\t\t\t\t\tid\n\t\t\t\t\tshortName\n\t\t\t\t}\n\t\t\t\tdescription\n\t\t\t\tbroadcasts {\n\t\t\t\t\tid\n\t\t\t\t}\n\t\t\t\tfeaturedImage {\n\t\t\t\t\turls {\n\t\t\t\t\t\tsquare\n\t\t\t\t\t\tcustomSquare(size: 150)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnetworks {\n\t\t\t\t\tid\n\t\t\t\t\tlogoSvgIcon\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SearchSeries($filters: SeriesListInputV2) {\n    seriesListV2(filters: $filters) {\n      total\n      items {\n        id\n        shortName\n        fullName\n        archived\n        show {\n          id\n          shortName\n        }\n        network {\n          id\n          name\n          logoSvgIcon\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchSeries($filters: SeriesListInputV2) {\n    seriesListV2(filters: $filters) {\n      total\n      items {\n        id\n        shortName\n        fullName\n        archived\n        show {\n          id\n          shortName\n        }\n        network {\n          id\n          name\n          logoSvgIcon\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetSeries($id: ID!) {\n    series(id: $id) {\n      id\n      shortName\n      fullName\n      shortDesc\n      fullDesc\n      archived\n      show {\n        id\n        shortName\n        fullName\n      }\n      network {\n        id\n        name\n      }\n      featuredImage {\n        id\n        key\n        urls {\n          medium\n          square\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetSeries($id: ID!) {\n    series(id: $id) {\n      id\n      shortName\n      fullName\n      shortDesc\n      fullDesc\n      archived\n      show {\n        id\n        shortName\n        fullName\n      }\n      network {\n        id\n        name\n      }\n      featuredImage {\n        id\n        key\n        urls {\n          medium\n          square\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SearchShows($filters: ShowListInputV2) {\n    showsV2(filters: $filters) {\n      total\n      items {\n        id\n        shortId\n        shortName\n        fullName\n        featuredImage {\n          urls {\n            square\n          }\n        }\n        presenters {\n            id\n            name\n        }\n        networks {\n            id\n            name\n            logoSvgIcon\n        }\n        hidden\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchShows($filters: ShowListInputV2) {\n    showsV2(filters: $filters) {\n      total\n      items {\n        id\n        shortId\n        shortName\n        fullName\n        featuredImage {\n          urls {\n            square\n          }\n        }\n        presenters {\n            id\n            name\n        }\n        networks {\n            id\n            name\n            logoSvgIcon\n        }\n        hidden\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetShow($id: ID!) {\n    show(id: $id) {\n      createdAt\n      extraData\n      featuredImage {\n          id\n          key\n          type\n          mimeType\n          fileSize {\n              label\n              raw\n          }\n          urls {\n              medium\n              square\n          }\n      }\n      fullDesc\n      fullName\n      hidden\n      id\n      networks {\n        id\n        name\n        logoSvgIcon\n      }\n      presenters {\n        id\n        name\n      }\n      series {\n        items {\n          id\n          fullName\n        }\n      }\n      shortDesc\n      shortId\n      shortName\n      totalEpisodes\n      updatedAt\n      url\n    }\n  }\n"): (typeof documents)["\n  query GetShow($id: ID!) {\n    show(id: $id) {\n      createdAt\n      extraData\n      featuredImage {\n          id\n          key\n          type\n          mimeType\n          fileSize {\n              label\n              raw\n          }\n          urls {\n              medium\n              square\n          }\n      }\n      fullDesc\n      fullName\n      hidden\n      id\n      networks {\n        id\n        name\n        logoSvgIcon\n      }\n      presenters {\n        id\n        name\n      }\n      series {\n        items {\n          id\n          fullName\n        }\n      }\n      shortDesc\n      shortId\n      shortName\n      totalEpisodes\n      updatedAt\n      url\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SearchTracks($filters: TrackListInput) {\n    tracks(filters: $filters) {\n      items {\n        id\n        artist\n        title\n        album\n        duration {\n          formatted\n          raw\n        }\n        path\n        enabled\n        year\n        genre {\n          name\n        }\n        isrc\n        bpm\n        dateAdded\n        dateModified\n      }\n      total\n    }\n  }\n"): (typeof documents)["\n  query SearchTracks($filters: TrackListInput) {\n    tracks(filters: $filters) {\n      items {\n        id\n        artist\n        title\n        album\n        duration {\n          formatted\n          raw\n        }\n        path\n        enabled\n        year\n        genre {\n          name\n        }\n        isrc\n        bpm\n        dateAdded\n        dateModified\n      }\n      total\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SearchTracksV2($filters: TrackListInputV2) {\n    tracksV2(filters: $filters) {\n      items {\n        id\n        artist\n        title\n        album\n        duration {\n          formatted\n          raw\n        }\n        path\n        enabled\n        year\n        genre {\n          id\n          name\n        }\n        subcategory {\n          id\n          name\n          category {\n            id\n            name\n          }\n        }\n        metadata {\n          id\n        }\n        isrc\n        bpm\n        dateAdded\n        dateModified\n      }\n      total\n    }\n  }\n"): (typeof documents)["\n  query SearchTracksV2($filters: TrackListInputV2) {\n    tracksV2(filters: $filters) {\n      items {\n        id\n        artist\n        title\n        album\n        duration {\n          formatted\n          raw\n        }\n        path\n        enabled\n        year\n        genre {\n          id\n          name\n        }\n        subcategory {\n          id\n          name\n          category {\n            id\n            name\n          }\n        }\n        metadata {\n          id\n        }\n        isrc\n        bpm\n        dateAdded\n        dateModified\n      }\n      total\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetTrack($id: ID!) {\n    track(id: $id) {\n      id\n      artist\n      title\n      album\n      duration {\n        formatted\n        raw\n      }\n      path\n      enabled\n      year\n      genre {\n        id\n        name\n      }\n      subcategory {\n        id\n        name\n        category {\n          id\n          name\n        }\n      }\n      isrc\n      bpm\n      dateAdded\n      dateModified\n      label\n      copyright\n      composer\n      publisher\n      image\n      metadata {\n        id\n        key\n        value\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetTrack($id: ID!) {\n    track(id: $id) {\n      id\n      artist\n      title\n      album\n      duration {\n        formatted\n        raw\n      }\n      path\n      enabled\n      year\n      genre {\n        id\n        name\n      }\n      subcategory {\n        id\n        name\n        category {\n          id\n          name\n        }\n      }\n      isrc\n      bpm\n      dateAdded\n      dateModified\n      label\n      copyright\n      composer\n      publisher\n      image\n      metadata {\n        id\n        key\n        value\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation SearchYouTube($query: String!) {\n    searchYouTube(query: $query) {\n      url\n      title\n      artist\n      duration\n      thumbnail\n      description\n    }\n  }\n"): (typeof documents)["\n  mutation SearchYouTube($query: String!) {\n    searchYouTube(query: $query) {\n      url\n      title\n      artist\n      duration\n      thumbnail\n      description\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation BulkSearchYouTube($input: BulkSearchYouTubeInput!) {\n    bulkSearchYouTube(input: $input) {\n      success\n      message\n      results {\n        query\n        results {\n          url\n          title\n          artist\n          duration\n          thumbnail\n          description\n        }\n        error\n      }\n      totalQueries\n      successfulQueries\n      failedQueries\n    }\n  }\n"): (typeof documents)["\n  mutation BulkSearchYouTube($input: BulkSearchYouTubeInput!) {\n    bulkSearchYouTube(input: $input) {\n      success\n      message\n      results {\n        query\n        results {\n          url\n          title\n          artist\n          duration\n          thumbnail\n          description\n        }\n        error\n      }\n      totalQueries\n      successfulQueries\n      failedQueries\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SearchMusicBrainz($input: MusicBrainzSearchInput!) {\n    searchMusicBrainz(input: $input) {\n      # Core recording identification\n      id\n      recordingId\n\n      # Core metadata (with Picard scoring weights)\n      title\n      artist\n      artistId\n      artistSortOrder\n\n      # Full artist credits array\n      artists {\n        id\n        name\n        sortName\n        joinPhrase\n      }\n\n      # Track metadata\n      length\n\n      # Industry identifiers\n      isrc\n\n      # Enhanced scoring\n      score\n\n      # Nested releases for this recording\n      releases {\n        # Core release identification\n        id\n        releaseId\n        releaseGroupId\n\n        # Core metadata\n        album\n\n        # Track information within this release\n        trackNumber\n        totalTracks\n        discNumber\n        totalDiscs\n\n        # Release information\n        date\n        originalDate\n        year\n        country\n\n        # Release categorization\n        releaseType\n        releaseStatus\n\n        # Industry identifiers\n        barcode\n\n        # Additional metadata\n        albumArtistSortOrder\n        media\n        label # Resolved via field resolver using DataLoader\n\n        # MusicBrainz IDs for linking\n        releaseArtistId\n        trackId\n\n        # Enhanced scoring for this specific release\n        score\n      }\n\n      # Dynamic metadata fields\n      dynamicFields {\n        key\n        value\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchMusicBrainz($input: MusicBrainzSearchInput!) {\n    searchMusicBrainz(input: $input) {\n      # Core recording identification\n      id\n      recordingId\n\n      # Core metadata (with Picard scoring weights)\n      title\n      artist\n      artistId\n      artistSortOrder\n\n      # Full artist credits array\n      artists {\n        id\n        name\n        sortName\n        joinPhrase\n      }\n\n      # Track metadata\n      length\n\n      # Industry identifiers\n      isrc\n\n      # Enhanced scoring\n      score\n\n      # Nested releases for this recording\n      releases {\n        # Core release identification\n        id\n        releaseId\n        releaseGroupId\n\n        # Core metadata\n        album\n\n        # Track information within this release\n        trackNumber\n        totalTracks\n        discNumber\n        totalDiscs\n\n        # Release information\n        date\n        originalDate\n        year\n        country\n\n        # Release categorization\n        releaseType\n        releaseStatus\n\n        # Industry identifiers\n        barcode\n\n        # Additional metadata\n        albumArtistSortOrder\n        media\n        label # Resolved via field resolver using DataLoader\n\n        # MusicBrainz IDs for linking\n        releaseArtistId\n        trackId\n\n        # Enhanced scoring for this specific release\n        score\n      }\n\n      # Dynamic metadata fields\n      dynamicFields {\n        key\n        value\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation BulkSearchMusicBrainz($input: BulkSearchMusicBrainzInput!) {\n    bulkSearchMusicBrainz(input: $input) {\n      success\n      message\n      results {\n        id\n        query {\n          artist\n          title\n          album\n        }\n        results {\n          id\n          title\n          artist\n          score\n        }\n        error\n      }\n      totalSearches\n      successfulSearches\n      failedSearches\n    }\n  }\n"): (typeof documents)["\n  mutation BulkSearchMusicBrainz($input: BulkSearchMusicBrainzInput!) {\n    bulkSearchMusicBrainz(input: $input) {\n      success\n      message\n      results {\n        id\n        query {\n          artist\n          title\n          album\n        }\n        results {\n          id\n          title\n          artist\n          score\n        }\n        error\n      }\n      totalSearches\n      successfulSearches\n      failedSearches\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;